
mic_lab_pro_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002a5c  08002a5c  00012a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002ad0  08002ad0  00012ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002ad4  08002ad4  00012ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000003c  20000000  08002ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002003c  2**0
                  CONTENTS
  7 .bss          000000f0  2000003c  2000003c  0002003c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000012c  2000012c  0002003c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000080c2  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001a8f  00000000  00000000  0002812e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009b8  00000000  00000000  00029bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008b0  00000000  00000000  0002a578  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003bb3  00000000  00000000  0002ae28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003085  00000000  00000000  0002e9db  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00031a60  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002794  00000000  00000000  00031adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00034270  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a44 	.word	0x08002a44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	08002a44 	.word	0x08002a44

080001c8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80001d0:	4a06      	ldr	r2, [pc, #24]	; (80001ec <NVIC_PriorityGroupConfig+0x24>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001dc:	60d3      	str	r3, [r2, #12]
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001f8:	2300      	movs	r3, #0
 80001fa:	73fb      	strb	r3, [r7, #15]
 80001fc:	2300      	movs	r3, #0
 80001fe:	73bb      	strb	r3, [r7, #14]
 8000200:	230f      	movs	r3, #15
 8000202:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	78db      	ldrb	r3, [r3, #3]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d039      	beq.n	8000280 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800020c:	4b27      	ldr	r3, [pc, #156]	; (80002ac <NVIC_Init+0xbc>)
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	43db      	mvns	r3, r3
 8000212:	0a1b      	lsrs	r3, r3, #8
 8000214:	b2db      	uxtb	r3, r3
 8000216:	f003 0307 	and.w	r3, r3, #7
 800021a:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	f1c3 0304 	rsb	r3, r3, #4
 8000222:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000224:	7b7a      	ldrb	r2, [r7, #13]
 8000226:	7bfb      	ldrb	r3, [r7, #15]
 8000228:	fa42 f303 	asr.w	r3, r2, r3
 800022c:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	785b      	ldrb	r3, [r3, #1]
 8000232:	461a      	mov	r2, r3
 8000234:	7bbb      	ldrb	r3, [r7, #14]
 8000236:	fa02 f303 	lsl.w	r3, r2, r3
 800023a:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	789a      	ldrb	r2, [r3, #2]
 8000240:	7b7b      	ldrb	r3, [r7, #13]
 8000242:	4013      	ands	r3, r2
 8000244:	b2da      	uxtb	r2, r3
 8000246:	7bfb      	ldrb	r3, [r7, #15]
 8000248:	4313      	orrs	r3, r2
 800024a:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	011b      	lsls	r3, r3, #4
 8000250:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000252:	4a17      	ldr	r2, [pc, #92]	; (80002b0 <NVIC_Init+0xc0>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	4413      	add	r3, r2
 800025a:	7bfa      	ldrb	r2, [r7, #15]
 800025c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000260:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <NVIC_Init+0xc0>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	095b      	lsrs	r3, r3, #5
 8000268:	b2db      	uxtb	r3, r3
 800026a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	f003 031f 	and.w	r3, r3, #31
 8000274:	2101      	movs	r1, #1
 8000276:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800027e:	e00f      	b.n	80002a0 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000280:	490b      	ldr	r1, [pc, #44]	; (80002b0 <NVIC_Init+0xc0>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	095b      	lsrs	r3, r3, #5
 8000288:	b2db      	uxtb	r3, r3
 800028a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f003 031f 	and.w	r3, r3, #31
 8000294:	2201      	movs	r2, #1
 8000296:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000298:	f100 0320 	add.w	r3, r0, #32
 800029c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	e000ed00 	.word	0xe000ed00
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	460b      	mov	r3, r1
 80002be:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <DAC_SetChannel1Data+0x34>)
 80002c6:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80002c8:	68fa      	ldr	r2, [r7, #12]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4413      	add	r3, r2
 80002ce:	3308      	adds	r3, #8
 80002d0:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	461a      	mov	r2, r3
 80002d6:	887b      	ldrh	r3, [r7, #2]
 80002d8:	6013      	str	r3, [r2, #0]
}
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40007400 	.word	0x40007400

080002ec <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	4b25      	ldr	r3, [pc, #148]	; (8000398 <DMA_Init+0xac>)
 8000304:	4013      	ands	r3, r2
 8000306:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	68db      	ldr	r3, [r3, #12]
 8000310:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000316:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000322:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	6a1b      	ldr	r3, [r3, #32]
 8000328:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800032e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000334:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800033a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000340:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000342:	68fa      	ldr	r2, [r7, #12]
 8000344:	4313      	orrs	r3, r2
 8000346:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	68fa      	ldr	r2, [r7, #12]
 800034c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f023 0307 	bic.w	r3, r3, #7
 800035a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4313      	orrs	r3, r2
 8000366:	68fa      	ldr	r2, [r7, #12]
 8000368:	4313      	orrs	r3, r2
 800036a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	691a      	ldr	r2, [r3, #16]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	685a      	ldr	r2, [r3, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	689a      	ldr	r2, [r3, #8]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	60da      	str	r2, [r3, #12]
}
 800038a:	bf00      	nop
 800038c:	3714      	adds	r7, #20
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	f01c803f 	.word	0xf01c803f

0800039c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	460b      	mov	r3, r1
 80003a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d006      	beq.n	80003bc <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f043 0201 	orr.w	r2, r3, #1
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80003ba:	e005      	b.n	80003c8 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 0201 	bic.w	r2, r3, #1
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	601a      	str	r2, [r3, #0]
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr

080003d4 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80003dc:	2300      	movs	r3, #0
 80003de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f003 0301 	and.w	r3, r3, #1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d002      	beq.n	80003f2 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80003ec:	2301      	movs	r3, #1
 80003ee:	73fb      	strb	r3, [r7, #15]
 80003f0:	e001      	b.n	80003f6 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80003f2:	2300      	movs	r3, #0
 80003f4:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80003f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3714      	adds	r7, #20
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000404:	b480      	push	{r7}
 8000406:	b087      	sub	sp, #28
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800040e:	2300      	movs	r3, #0
 8000410:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a15      	ldr	r2, [pc, #84]	; (8000470 <DMA_GetFlagStatus+0x6c>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d802      	bhi.n	8000424 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <DMA_GetFlagStatus+0x70>)
 8000420:	613b      	str	r3, [r7, #16]
 8000422:	e001      	b.n	8000428 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <DMA_GetFlagStatus+0x74>)
 8000426:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800042e:	2b00      	cmp	r3, #0
 8000430:	d003      	beq.n	800043a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	e002      	b.n	8000440 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800043a:	693b      	ldr	r3, [r7, #16]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000446:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800044a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800044c:	68fa      	ldr	r2, [r7, #12]
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	4013      	ands	r3, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	d002      	beq.n	800045c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000456:	2301      	movs	r3, #1
 8000458:	75fb      	strb	r3, [r7, #23]
 800045a:	e001      	b.n	8000460 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800045c:	2300      	movs	r3, #0
 800045e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000460:	7dfb      	ldrb	r3, [r7, #23]
}
 8000462:	4618      	mov	r0, r3
 8000464:	371c      	adds	r7, #28
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	4002640f 	.word	0x4002640f
 8000474:	40026000 	.word	0x40026000
 8000478:	40026400 	.word	0x40026400

0800047c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a10      	ldr	r2, [pc, #64]	; (80004cc <DMA_ClearFlag+0x50>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d802      	bhi.n	8000494 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <DMA_ClearFlag+0x54>)
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	e001      	b.n	8000498 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <DMA_ClearFlag+0x58>)
 8000496:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d007      	beq.n	80004b2 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80004a8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80004ac:	68fa      	ldr	r2, [r7, #12]
 80004ae:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80004b0:	e006      	b.n	80004c0 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80004b8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80004bc:	68fa      	ldr	r2, [r7, #12]
 80004be:	6093      	str	r3, [r2, #8]
}
 80004c0:	bf00      	nop
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	4002640f 	.word	0x4002640f
 80004d0:	40026000 	.word	0x40026000
 80004d4:	40026400 	.word	0x40026400

080004d8 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80004e4:	4b34      	ldr	r3, [pc, #208]	; (80005b8 <EXTI_Init+0xe0>)
 80004e6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	799b      	ldrb	r3, [r3, #6]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d04f      	beq.n	8000590 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80004f0:	4931      	ldr	r1, [pc, #196]	; (80005b8 <EXTI_Init+0xe0>)
 80004f2:	4b31      	ldr	r3, [pc, #196]	; (80005b8 <EXTI_Init+0xe0>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	43db      	mvns	r3, r3
 80004fc:	4013      	ands	r3, r2
 80004fe:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000500:	492d      	ldr	r1, [pc, #180]	; (80005b8 <EXTI_Init+0xe0>)
 8000502:	4b2d      	ldr	r3, [pc, #180]	; (80005b8 <EXTI_Init+0xe0>)
 8000504:	685a      	ldr	r2, [r3, #4]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	43db      	mvns	r3, r3
 800050c:	4013      	ands	r3, r2
 800050e:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	461a      	mov	r2, r3
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	4413      	add	r3, r2
 800051a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	68fa      	ldr	r2, [r7, #12]
 8000520:	6811      	ldr	r1, [r2, #0]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	6812      	ldr	r2, [r2, #0]
 8000526:	430a      	orrs	r2, r1
 8000528:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800052a:	4923      	ldr	r1, [pc, #140]	; (80005b8 <EXTI_Init+0xe0>)
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <EXTI_Init+0xe0>)
 800052e:	689a      	ldr	r2, [r3, #8]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	43db      	mvns	r3, r3
 8000536:	4013      	ands	r3, r2
 8000538:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800053a:	491f      	ldr	r1, [pc, #124]	; (80005b8 <EXTI_Init+0xe0>)
 800053c:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <EXTI_Init+0xe0>)
 800053e:	68da      	ldr	r2, [r3, #12]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	43db      	mvns	r3, r3
 8000546:	4013      	ands	r3, r2
 8000548:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	795b      	ldrb	r3, [r3, #5]
 800054e:	2b10      	cmp	r3, #16
 8000550:	d10e      	bne.n	8000570 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000552:	4919      	ldr	r1, [pc, #100]	; (80005b8 <EXTI_Init+0xe0>)
 8000554:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <EXTI_Init+0xe0>)
 8000556:	689a      	ldr	r2, [r3, #8]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4313      	orrs	r3, r2
 800055e:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000560:	4915      	ldr	r1, [pc, #84]	; (80005b8 <EXTI_Init+0xe0>)
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <EXTI_Init+0xe0>)
 8000564:	68da      	ldr	r2, [r3, #12]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4313      	orrs	r3, r2
 800056c:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800056e:	e01d      	b.n	80005ac <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <EXTI_Init+0xe0>)
 8000572:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	795b      	ldrb	r3, [r3, #5]
 8000578:	461a      	mov	r2, r3
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	4413      	add	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	6811      	ldr	r1, [r2, #0]
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	6812      	ldr	r2, [r2, #0]
 800058a:	430a      	orrs	r2, r1
 800058c:	601a      	str	r2, [r3, #0]
}
 800058e:	e00d      	b.n	80005ac <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	461a      	mov	r2, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	4413      	add	r3, r2
 800059a:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	6811      	ldr	r1, [r2, #0]
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	6812      	ldr	r2, [r2, #0]
 80005a6:	43d2      	mvns	r2, r2
 80005a8:	400a      	ands	r2, r1
 80005aa:	601a      	str	r2, [r3, #0]
}
 80005ac:	bf00      	nop
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40013c00 	.word	0x40013c00

080005bc <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <EXTI_GetITStatus+0x44>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4013      	ands	r3, r2
 80005d4:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <EXTI_GetITStatus+0x44>)
 80005d8:	695a      	ldr	r2, [r3, #20]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4013      	ands	r3, r2
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d005      	beq.n	80005ee <EXTI_GetITStatus+0x32>
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d002      	beq.n	80005ee <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
 80005ec:	e001      	b.n	80005f2 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	40013c00 	.word	0x40013c00

08000604 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <EXTI_ClearITPendingBit+0x1c>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6153      	str	r3, [r2, #20]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40013c00 	.word	0x40013c00

08000624 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000624:	b480      	push	{r7}
 8000626:	b087      	sub	sp, #28
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e076      	b.n	800072e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000640:	2201      	movs	r2, #1
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	4013      	ands	r3, r2
 8000652:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000654:	68fa      	ldr	r2, [r7, #12]
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	429a      	cmp	r2, r3
 800065a:	d165      	bne.n	8000728 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	2103      	movs	r1, #3
 8000666:	fa01 f303 	lsl.w	r3, r1, r3
 800066a:	43db      	mvns	r3, r3
 800066c:	401a      	ands	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	4619      	mov	r1, r3
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	fa01 f303 	lsl.w	r3, r1, r3
 8000684:	431a      	orrs	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d003      	beq.n	800069a <GPIO_Init+0x76>
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	2b02      	cmp	r3, #2
 8000698:	d12e      	bne.n	80006f8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	2103      	movs	r1, #3
 80006a4:	fa01 f303 	lsl.w	r3, r1, r3
 80006a8:	43db      	mvns	r3, r3
 80006aa:	401a      	ands	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	689a      	ldr	r2, [r3, #8]
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	795b      	ldrb	r3, [r3, #5]
 80006b8:	4619      	mov	r1, r3
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	fa01 f303 	lsl.w	r3, r1, r3
 80006c2:	431a      	orrs	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	685a      	ldr	r2, [r3, #4]
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	2301      	movs	r3, #1
 80006d4:	408b      	lsls	r3, r1
 80006d6:	43db      	mvns	r3, r3
 80006d8:	401a      	ands	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	683a      	ldr	r2, [r7, #0]
 80006e4:	7992      	ldrb	r2, [r2, #6]
 80006e6:	4611      	mov	r1, r2
 80006e8:	697a      	ldr	r2, [r7, #20]
 80006ea:	b292      	uxth	r2, r2
 80006ec:	fa01 f202 	lsl.w	r2, r1, r2
 80006f0:	b292      	uxth	r2, r2
 80006f2:	431a      	orrs	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	68da      	ldr	r2, [r3, #12]
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	2103      	movs	r1, #3
 8000704:	fa01 f303 	lsl.w	r3, r1, r3
 8000708:	43db      	mvns	r3, r3
 800070a:	401a      	ands	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	68da      	ldr	r2, [r3, #12]
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	79db      	ldrb	r3, [r3, #7]
 8000718:	4619      	mov	r1, r3
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	431a      	orrs	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	3301      	adds	r3, #1
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	2b0f      	cmp	r3, #15
 8000732:	d985      	bls.n	8000640 <GPIO_Init+0x1c>
    }
  }
}
 8000734:	bf00      	nop
 8000736:	371c      	adds	r7, #28
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800074c:	2300      	movs	r3, #0
 800074e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	691a      	ldr	r2, [r3, #16]
 8000754:	887b      	ldrh	r3, [r7, #2]
 8000756:	4013      	ands	r3, r2
 8000758:	2b00      	cmp	r3, #0
 800075a:	d002      	beq.n	8000762 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800075c:	2301      	movs	r3, #1
 800075e:	73fb      	strb	r3, [r7, #15]
 8000760:	e001      	b.n	8000766 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000766:	7bfb      	ldrb	r3, [r7, #15]
}
 8000768:	4618      	mov	r0, r3
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000780:	2300      	movs	r3, #0
 8000782:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	695a      	ldr	r2, [r3, #20]
 8000788:	887b      	ldrh	r3, [r7, #2]
 800078a:	4013      	ands	r3, r2
 800078c:	2b00      	cmp	r3, #0
 800078e:	d002      	beq.n	8000796 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000790:	2301      	movs	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	e001      	b.n	800079a <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000796:	2300      	movs	r3, #0
 8000798:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800079a:	7bfb      	ldrb	r3, [r7, #15]
}
 800079c:	4618      	mov	r0, r3
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	887a      	ldrh	r2, [r7, #2]
 80007b8:	831a      	strh	r2, [r3, #24]
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007c6:	b480      	push	{r7}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
 80007ce:	460b      	mov	r3, r1
 80007d0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	887a      	ldrh	r2, [r7, #2]
 80007d6:	835a      	strh	r2, [r3, #26]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	807b      	strh	r3, [r7, #2]
 80007f0:	4613      	mov	r3, r2
 80007f2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80007fc:	787a      	ldrb	r2, [r7, #1]
 80007fe:	887b      	ldrh	r3, [r7, #2]
 8000800:	f003 0307 	and.w	r3, r3, #7
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800080c:	887b      	ldrh	r3, [r7, #2]
 800080e:	08db      	lsrs	r3, r3, #3
 8000810:	b29b      	uxth	r3, r3
 8000812:	4618      	mov	r0, r3
 8000814:	887b      	ldrh	r3, [r7, #2]
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	b29b      	uxth	r3, r3
 800081a:	461a      	mov	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3208      	adds	r2, #8
 8000820:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000824:	887b      	ldrh	r3, [r7, #2]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	210f      	movs	r1, #15
 800082e:	fa01 f303 	lsl.w	r3, r1, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	ea02 0103 	and.w	r1, r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f100 0208 	add.w	r2, r0, #8
 800083e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000842:	887b      	ldrh	r3, [r7, #2]
 8000844:	08db      	lsrs	r3, r3, #3
 8000846:	b29b      	uxth	r3, r3
 8000848:	461a      	mov	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	3208      	adds	r2, #8
 800084e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	4313      	orrs	r3, r2
 8000856:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000858:	887b      	ldrh	r3, [r7, #2]
 800085a:	08db      	lsrs	r3, r3, #3
 800085c:	b29b      	uxth	r3, r3
 800085e:	461a      	mov	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3208      	adds	r2, #8
 8000864:	68b9      	ldr	r1, [r7, #8]
 8000866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800086a:	bf00      	nop
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000886:	2300      	movs	r3, #0
 8000888:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800088a:	2304      	movs	r3, #4
 800088c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800088e:	4b57      	ldr	r3, [pc, #348]	; (80009ec <I2C_Init+0x174>)
 8000890:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	889b      	ldrh	r3, [r3, #4]
 8000896:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000898:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800089a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800089e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 f99b 	bl	8000be0 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	4a4f      	ldr	r2, [pc, #316]	; (80009f0 <I2C_Init+0x178>)
 80008b2:	fba2 2303 	umull	r2, r3, r2, r3
 80008b6:	0c9b      	lsrs	r3, r3, #18
 80008b8:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80008ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80008bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80008be:	4313      	orrs	r3, r2
 80008c0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80008c6:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	f023 0301 	bic.w	r3, r3, #1
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a44      	ldr	r2, [pc, #272]	; (80009f4 <I2C_Init+0x17c>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d815      	bhi.n	8000912 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	69fa      	ldr	r2, [r7, #28]
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80008f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d801      	bhi.n	80008fe <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80008fa:	2304      	movs	r3, #4
 80008fc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80008fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000902:	4313      	orrs	r3, r2
 8000904:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000906:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000908:	3301      	adds	r3, #1
 800090a:	b29a      	uxth	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	841a      	strh	r2, [r3, #32]
 8000910:	e040      	b.n	8000994 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	88db      	ldrh	r3, [r3, #6]
 8000916:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800091a:	4293      	cmp	r3, r2
 800091c:	d109      	bne.n	8000932 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	4613      	mov	r3, r2
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	4413      	add	r3, r2
 8000928:	69fa      	ldr	r2, [r7, #28]
 800092a:	fbb2 f3f3 	udiv	r3, r2, r3
 800092e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000930:	e00e      	b.n	8000950 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	4613      	mov	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	009a      	lsls	r2, r3, #2
 800093e:	4413      	add	r3, r2
 8000940:	69fa      	ldr	r2, [r7, #28]
 8000942:	fbb2 f3f3 	udiv	r3, r2, r3
 8000946:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000948:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800094a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000950:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000956:	2b00      	cmp	r3, #0
 8000958:	d103      	bne.n	8000962 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800095a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000962:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000964:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000966:	4313      	orrs	r3, r2
 8000968:	b29b      	uxth	r3, r3
 800096a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800096e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000972:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000974:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000976:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800097a:	fb02 f303 	mul.w	r3, r2, r3
 800097e:	4a1e      	ldr	r2, [pc, #120]	; (80009f8 <I2C_Init+0x180>)
 8000980:	fb82 1203 	smull	r1, r2, r2, r3
 8000984:	1192      	asrs	r2, r2, #6
 8000986:	17db      	asrs	r3, r3, #31
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	b29b      	uxth	r3, r3
 800098c:	3301      	adds	r3, #1
 800098e:	b29a      	uxth	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000998:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80009b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009b2:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80009b6:	f023 0302 	bic.w	r3, r3, #2
 80009ba:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	889a      	ldrh	r2, [r3, #4]
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	895b      	ldrh	r3, [r3, #10]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009ca:	4313      	orrs	r3, r2
 80009cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80009d2:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	899a      	ldrh	r2, [r3, #12]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	891b      	ldrh	r3, [r3, #8]
 80009dc:	4313      	orrs	r3, r2
 80009de:	b29a      	uxth	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	811a      	strh	r2, [r3, #8]
}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	; 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	007a1200 	.word	0x007a1200
 80009f0:	431bde83 	.word	0x431bde83
 80009f4:	000186a0 	.word	0x000186a0
 80009f8:	10624dd3 	.word	0x10624dd3

080009fc <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a08:	78fb      	ldrb	r3, [r7, #3]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d008      	beq.n	8000a20 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8000a1e:	e007      	b.n	8000a30 <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	f023 0301 	bic.w	r3, r3, #1
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	801a      	strh	r2, [r3, #0]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a48:	78fb      	ldrb	r3, [r7, #3]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d008      	beq.n	8000a60 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8000a5e:	e007      	b.n	8000a70 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	801a      	strh	r2, [r3, #0]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a88:	78fb      	ldrb	r3, [r7, #3]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d008      	beq.n	8000aa0 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8000a9e:	e007      	b.n	8000ab0 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	801a      	strh	r2, [r3, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	70fb      	strb	r3, [r7, #3]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8000acc:	78bb      	ldrb	r3, [r7, #2]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d004      	beq.n	8000adc <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	70fb      	strb	r3, [r7, #3]
 8000ada:	e003      	b.n	8000ae4 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8000adc:	78fb      	ldrb	r3, [r7, #3]
 8000ade:	f023 0301 	bic.w	r3, r3, #1
 8000ae2:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8000ae4:	78fb      	ldrb	r3, [r7, #3]
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	821a      	strh	r2, [r3, #16]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8000b04:	78fb      	ldrb	r3, [r7, #3]
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	821a      	strh	r2, [r3, #16]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b087      	sub	sp, #28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	8a9b      	ldrh	r3, [r3, #20]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	8b1b      	ldrh	r3, [r3, #24]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	041b      	lsls	r3, r3, #16
 8000b46:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8000b48:	68fa      	ldr	r2, [r7, #12]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000b52:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	401a      	ands	r2, r3
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d102      	bne.n	8000b66 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8000b60:	2301      	movs	r3, #1
 8000b62:	75fb      	strb	r3, [r7, #23]
 8000b64:	e001      	b.n	8000b6a <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8000b66:	2300      	movs	r3, #0
 8000b68:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8000b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	371c      	adds	r7, #28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b087      	sub	sp, #28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000b82:	2300      	movs	r3, #0
 8000b84:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	0f1b      	lsrs	r3, r3, #28
 8000b96:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000b9e:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d003      	beq.n	8000bae <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	3314      	adds	r3, #20
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	e005      	b.n	8000bba <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	0c1b      	lsrs	r3, r3, #16
 8000bb2:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	3318      	adds	r3, #24
 8000bb8:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d002      	beq.n	8000bcc <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	75fb      	strb	r3, [r7, #23]
 8000bca:	e001      	b.n	8000bd0 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8000bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	371c      	adds	r7, #28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000c00:	4b47      	ldr	r3, [pc, #284]	; (8000d20 <RCC_GetClocksFreq+0x140>)
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	f003 030c 	and.w	r3, r3, #12
 8000c08:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	d007      	beq.n	8000c20 <RCC_GetClocksFreq+0x40>
 8000c10:	2b08      	cmp	r3, #8
 8000c12:	d009      	beq.n	8000c28 <RCC_GetClocksFreq+0x48>
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d13d      	bne.n	8000c94 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a42      	ldr	r2, [pc, #264]	; (8000d24 <RCC_GetClocksFreq+0x144>)
 8000c1c:	601a      	str	r2, [r3, #0]
      break;
 8000c1e:	e03d      	b.n	8000c9c <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a41      	ldr	r2, [pc, #260]	; (8000d28 <RCC_GetClocksFreq+0x148>)
 8000c24:	601a      	str	r2, [r3, #0]
      break;
 8000c26:	e039      	b.n	8000c9c <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000c28:	4b3d      	ldr	r3, [pc, #244]	; (8000d20 <RCC_GetClocksFreq+0x140>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	0d9b      	lsrs	r3, r3, #22
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c34:	4b3a      	ldr	r3, [pc, #232]	; (8000d20 <RCC_GetClocksFreq+0x140>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c3c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d00c      	beq.n	8000c5e <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000c44:	4a38      	ldr	r2, [pc, #224]	; (8000d28 <RCC_GetClocksFreq+0x148>)
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4c:	4a34      	ldr	r2, [pc, #208]	; (8000d20 <RCC_GetClocksFreq+0x140>)
 8000c4e:	6852      	ldr	r2, [r2, #4]
 8000c50:	0992      	lsrs	r2, r2, #6
 8000c52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c56:	fb02 f303 	mul.w	r3, r2, r3
 8000c5a:	61fb      	str	r3, [r7, #28]
 8000c5c:	e00b      	b.n	8000c76 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000c5e:	4a31      	ldr	r2, [pc, #196]	; (8000d24 <RCC_GetClocksFreq+0x144>)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c66:	4a2e      	ldr	r2, [pc, #184]	; (8000d20 <RCC_GetClocksFreq+0x140>)
 8000c68:	6852      	ldr	r2, [r2, #4]
 8000c6a:	0992      	lsrs	r2, r2, #6
 8000c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c70:	fb02 f303 	mul.w	r3, r2, r3
 8000c74:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000c76:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <RCC_GetClocksFreq+0x140>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	0c1b      	lsrs	r3, r3, #16
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	3301      	adds	r3, #1
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000c86:	69fa      	ldr	r2, [r7, #28]
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	601a      	str	r2, [r3, #0]
      break;
 8000c92:	e003      	b.n	8000c9c <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a23      	ldr	r2, [pc, #140]	; (8000d24 <RCC_GetClocksFreq+0x144>)
 8000c98:	601a      	str	r2, [r3, #0]
      break;
 8000c9a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000c9c:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <RCC_GetClocksFreq+0x140>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ca4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	091b      	lsrs	r3, r3, #4
 8000caa:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000cac:	4a1f      	ldr	r2, [pc, #124]	; (8000d2c <RCC_GetClocksFreq+0x14c>)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	40da      	lsrs	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <RCC_GetClocksFreq+0x140>)
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000ccc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	0a9b      	lsrs	r3, r3, #10
 8000cd2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000cd4:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <RCC_GetClocksFreq+0x14c>)
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	4413      	add	r3, r2
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	40da      	lsrs	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <RCC_GetClocksFreq+0x140>)
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000cf4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	0b5b      	lsrs	r3, r3, #13
 8000cfa:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000cfc:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <RCC_GetClocksFreq+0x14c>)
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	4413      	add	r3, r2
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	40da      	lsrs	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	60da      	str	r2, [r3, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3724      	adds	r7, #36	; 0x24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	40023800 	.word	0x40023800
 8000d24:	00f42400 	.word	0x00f42400
 8000d28:	007a1200 	.word	0x007a1200
 8000d2c:	20000000 	.word	0x20000000

08000d30 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d3c:	78fb      	ldrb	r3, [r7, #3]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d006      	beq.n	8000d50 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000d42:	490a      	ldr	r1, [pc, #40]	; (8000d6c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000d4e:	e006      	b.n	8000d5e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000d50:	4906      	ldr	r1, [pc, #24]	; (8000d6c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800

08000d70 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d7c:	78fb      	ldrb	r3, [r7, #3]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d006      	beq.n	8000d90 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000d82:	490a      	ldr	r1, [pc, #40]	; (8000dac <RCC_AHB2PeriphClockCmd+0x3c>)
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <RCC_AHB2PeriphClockCmd+0x3c>)
 8000d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	634b      	str	r3, [r1, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
 8000d8e:	e006      	b.n	8000d9e <RCC_AHB2PeriphClockCmd+0x2e>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8000d90:	4906      	ldr	r1, [pc, #24]	; (8000dac <RCC_AHB2PeriphClockCmd+0x3c>)
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <RCC_AHB2PeriphClockCmd+0x3c>)
 8000d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	634b      	str	r3, [r1, #52]	; 0x34
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800

08000db0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d006      	beq.n	8000dd0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000dc2:	490a      	ldr	r1, [pc, #40]	; (8000dec <RCC_APB1PeriphClockCmd+0x3c>)
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <RCC_APB1PeriphClockCmd+0x3c>)
 8000dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000dce:	e006      	b.n	8000dde <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000dd0:	4906      	ldr	r1, [pc, #24]	; (8000dec <RCC_APB1PeriphClockCmd+0x3c>)
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <RCC_APB1PeriphClockCmd+0x3c>)
 8000dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	4013      	ands	r3, r2
 8000ddc:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000dfc:	78fb      	ldrb	r3, [r7, #3]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d006      	beq.n	8000e10 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000e02:	490a      	ldr	r1, [pc, #40]	; (8000e2c <RCC_APB2PeriphClockCmd+0x3c>)
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <RCC_APB2PeriphClockCmd+0x3c>)
 8000e06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000e0e:	e006      	b.n	8000e1e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000e10:	4906      	ldr	r1, [pc, #24]	; (8000e2c <RCC_APB2PeriphClockCmd+0x3c>)
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <RCC_APB2PeriphClockCmd+0x3c>)
 8000e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800

08000e30 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d006      	beq.n	8000e4e <RNG_Cmd+0x1e>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8000e40:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <RNG_Cmd+0x38>)
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <RNG_Cmd+0x38>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
  }
}
 8000e4c:	e005      	b.n	8000e5a <RNG_Cmd+0x2a>
    RNG->CR &= ~RNG_CR_RNGEN;
 8000e4e:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <RNG_Cmd+0x38>)
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <RNG_Cmd+0x38>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f023 0304 	bic.w	r3, r3, #4
 8000e58:	6013      	str	r3, [r2, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	50060800 	.word	0x50060800

08000e6c <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <RNG_GetRandomNumber+0x14>)
 8000e72:	689b      	ldr	r3, [r3, #8]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	50060800 	.word	0x50060800

08000e84 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	887a      	ldrh	r2, [r7, #2]
 8000e94:	819a      	strh	r2, [r3, #12]
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b085      	sub	sp, #20
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	891b      	ldrh	r3, [r3, #8]
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	887b      	ldrh	r3, [r7, #2]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d002      	beq.n	8000ec8 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	e001      	b.n	8000ecc <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000edc:	b490      	push	{r4, r7}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	460a      	mov	r2, r1
 8000ee6:	71fb      	strb	r3, [r7, #7]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000ef0:	79bb      	ldrb	r3, [r7, #6]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	220f      	movs	r2, #15
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000f00:	4916      	ldr	r1, [pc, #88]	; (8000f5c <SYSCFG_EXTILineConfig+0x80>)
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	4618      	mov	r0, r3
 8000f0a:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <SYSCFG_EXTILineConfig+0x80>)
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	3302      	adds	r3, #2
 8000f14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	1c83      	adds	r3, r0, #2
 8000f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <SYSCFG_EXTILineConfig+0x80>)
 8000f26:	79bb      	ldrb	r3, [r7, #6]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	461c      	mov	r4, r3
 8000f2e:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <SYSCFG_EXTILineConfig+0x80>)
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	3302      	adds	r3, #2
 8000f38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f3c:	79f9      	ldrb	r1, [r7, #7]
 8000f3e:	79bb      	ldrb	r3, [r7, #6]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	1ca3      	adds	r3, r4, #2
 8000f4e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc90      	pop	{r4, r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	40013800 	.word	0x40013800

08000f60 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000f64:	4b38      	ldr	r3, [pc, #224]	; (8001048 <Audio_MAL_IRQHandler+0xe8>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b38      	ldr	r3, [pc, #224]	; (800104c <Audio_MAL_IRQHandler+0xec>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4610      	mov	r0, r2
 8000f70:	f7ff fa48 	bl	8000404 <DMA_GetFlagStatus>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d064      	beq.n	8001044 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000f7a:	4b35      	ldr	r3, [pc, #212]	; (8001050 <Audio_MAL_IRQHandler+0xf0>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d04c      	beq.n	800101c <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000f82:	bf00      	nop
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <Audio_MAL_IRQHandler+0xe8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fa23 	bl	80003d4 <DMA_GetCmdStatus>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f7      	bne.n	8000f84 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000f94:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <Audio_MAL_IRQHandler+0xe8>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b2c      	ldr	r3, [pc, #176]	; (800104c <Audio_MAL_IRQHandler+0xec>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f7ff fa6c 	bl	800047c <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000fa4:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <Audio_MAL_IRQHandler+0xf4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <Audio_MAL_IRQHandler+0xf8>)
 8000fac:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000fae:	4b28      	ldr	r3, [pc, #160]	; (8001050 <Audio_MAL_IRQHandler+0xf0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	bf28      	it	cs
 8000fba:	4613      	movcs	r3, r2
 8000fbc:	4a26      	ldr	r2, [pc, #152]	; (8001058 <Audio_MAL_IRQHandler+0xf8>)
 8000fbe:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000fc0:	4b21      	ldr	r3, [pc, #132]	; (8001048 <Audio_MAL_IRQHandler+0xe8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4924      	ldr	r1, [pc, #144]	; (8001058 <Audio_MAL_IRQHandler+0xf8>)
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff f990 	bl	80002ec <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <Audio_MAL_IRQHandler+0xe8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff f9e2 	bl	800039c <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <Audio_MAL_IRQHandler+0xf4>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <Audio_MAL_IRQHandler+0xf0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe4:	d203      	bcs.n	8000fee <Audio_MAL_IRQHandler+0x8e>
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <Audio_MAL_IRQHandler+0xf0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	e000      	b.n	8000ff0 <Audio_MAL_IRQHandler+0x90>
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <Audio_MAL_IRQHandler+0xfc>)
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4a18      	ldr	r2, [pc, #96]	; (8001054 <Audio_MAL_IRQHandler+0xf4>)
 8000ff4:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <Audio_MAL_IRQHandler+0xf0>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <Audio_MAL_IRQHandler+0xf0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001002:	428b      	cmp	r3, r1
 8001004:	bf28      	it	cs
 8001006:	460b      	movcs	r3, r1
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	4a11      	ldr	r2, [pc, #68]	; (8001050 <Audio_MAL_IRQHandler+0xf0>)
 800100c:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <Audio_MAL_IRQHandler+0xe8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2101      	movs	r1, #1
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff f9c1 	bl	800039c <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800101a:	e013      	b.n	8001044 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <Audio_MAL_IRQHandler+0xe8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff f9ba 	bl	800039c <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <Audio_MAL_IRQHandler+0xe8>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <Audio_MAL_IRQHandler+0xec>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	4610      	mov	r0, r2
 8001034:	f7ff fa22 	bl	800047c <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <Audio_MAL_IRQHandler+0xf4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f001 fac8 	bl	80025d4 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000018 	.word	0x20000018
 800104c:	2000001c 	.word	0x2000001c
 8001050:	20000010 	.word	0x20000010
 8001054:	20000084 	.word	0x20000084
 8001058:	200000c4 	.word	0x200000c4
 800105c:	0001fffe 	.word	0x0001fffe

08001060 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001064:	f7ff ff7c 	bl	8000f60 <Audio_MAL_IRQHandler>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}

0800106c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8001070:	f7ff ff76 	bl	8000f60 <Audio_MAL_IRQHandler>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 800107c:	2102      	movs	r1, #2
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <SPI3_IRQHandler+0x3c>)
 8001080:	f7ff ff0f 	bl	8000ea2 <SPI_I2S_GetFlagStatus>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d011      	beq.n	80010ae <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <SPI3_IRQHandler+0x40>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d106      	bne.n	80010a0 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8001092:	f001 faaa 	bl	80025ea <EVAL_AUDIO_GetSampleCallBack>
 8001096:	4603      	mov	r3, r0
 8001098:	4619      	mov	r1, r3
 800109a:	2004      	movs	r0, #4
 800109c:	f7ff f90a 	bl	80002b4 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80010a0:	f001 faa3 	bl	80025ea <EVAL_AUDIO_GetSampleCallBack>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4619      	mov	r1, r3
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <SPI3_IRQHandler+0x3c>)
 80010aa:	f7ff feeb 	bl	8000e84 <SPI_I2S_SendData>
  }
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40003c00 	.word	0x40003c00
 80010b8:	20000014 	.word	0x20000014

080010bc <lcd_init>:
{ 0, 16, 8, 4, 2, 1, 0,0} //\//
};


void lcd_init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08c      	sub	sp, #48	; 0x30
 80010c0:	af00      	add	r7, sp, #0
	char cc0[] = {0, 0, 10, 21, 17, 10, 4, 0}; // kalp
 80010c2:	4a3d      	ldr	r2, [pc, #244]	; (80011b8 <lcd_init+0xfc>)
 80010c4:	f107 0318 	add.w	r3, r7, #24
 80010c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010cc:	e883 0003 	stmia.w	r3, {r0, r1}
	char cc1[] = {31, 31, 31, 31, 31, 31, 31, 31}; // full cell
 80010d0:	4a3a      	ldr	r2, [pc, #232]	; (80011bc <lcd_init+0x100>)
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010da:	e883 0003 	stmia.w	r3, {r0, r1}
	char cc2[] = {31, 17, 17, 17, 17, 17, 17, 31}; // OFF led
 80010de:	4a38      	ldr	r2, [pc, #224]	; (80011c0 <lcd_init+0x104>)
 80010e0:	f107 0308 	add.w	r3, r7, #8
 80010e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010e8:	e883 0003 	stmia.w	r3, {r0, r1}
	char cc3[] = {17, 17, 21, 10, 10, 4, 10, 27}; // ON led
 80010ec:	4a35      	ldr	r2, [pc, #212]	; (80011c4 <lcd_init+0x108>)
 80010ee:	463b      	mov	r3, r7
 80010f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010f4:	e883 0003 	stmia.w	r3, {r0, r1}

	lcd_send_cmd(0x02);				// return to home
 80010f8:	2002      	movs	r0, #2
 80010fa:	f000 f865 	bl	80011c8 <lcd_send_cmd>
	lcd_send_cmd(0x28);				// Function set	-> DB5 = 1 and DB3 = N = 1 2-line display mode
 80010fe:	2028      	movs	r0, #40	; 0x28
 8001100:	f000 f862 	bl	80011c8 <lcd_send_cmd>
	lcd_send_cmd(0x0C);				// Display ON/OFF Control DB3 = 1 and DB2 = D = 1 display is turned on
 8001104:	200c      	movs	r0, #12
 8001106:	f000 f85f 	bl	80011c8 <lcd_send_cmd>
	// if DB1 = C = 1 cursor on or DB1 = C = 0 cursor is off and DB0 = B = 1 cursor blink on or DB1 = C = 0 cursor blink off.

	lcd_send_cmd(0x40);
 800110a:	2040      	movs	r0, #64	; 0x40
 800110c:	f000 f85c 	bl	80011c8 <lcd_send_cmd>
	for (int i=0; i<8; i++) lcd_send_data(cc0[i]);
 8001110:	2300      	movs	r3, #0
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001114:	e00a      	b.n	800112c <lcd_init+0x70>
 8001116:	f107 0218 	add.w	r2, r7, #24
 800111a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f897 	bl	8001254 <lcd_send_data>
 8001126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001128:	3301      	adds	r3, #1
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800112c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112e:	2b07      	cmp	r3, #7
 8001130:	ddf1      	ble.n	8001116 <lcd_init+0x5a>

	lcd_send_cmd(0x40+8);
 8001132:	2048      	movs	r0, #72	; 0x48
 8001134:	f000 f848 	bl	80011c8 <lcd_send_cmd>
	for (int i=0; i<8; i++) lcd_send_data(cc1[i]);
 8001138:	2300      	movs	r3, #0
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
 800113c:	e00a      	b.n	8001154 <lcd_init+0x98>
 800113e:	f107 0210 	add.w	r2, r7, #16
 8001142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001144:	4413      	add	r3, r2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f883 	bl	8001254 <lcd_send_data>
 800114e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001150:	3301      	adds	r3, #1
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
 8001154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001156:	2b07      	cmp	r3, #7
 8001158:	ddf1      	ble.n	800113e <lcd_init+0x82>

	lcd_send_cmd(0x40+16);
 800115a:	2050      	movs	r0, #80	; 0x50
 800115c:	f000 f834 	bl	80011c8 <lcd_send_cmd>
	for (int i=0; i<8; i++) lcd_send_data(cc2[i]);
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
 8001164:	e00a      	b.n	800117c <lcd_init+0xc0>
 8001166:	f107 0208 	add.w	r2, r7, #8
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f000 f86f 	bl	8001254 <lcd_send_data>
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	3301      	adds	r3, #1
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	2b07      	cmp	r3, #7
 8001180:	ddf1      	ble.n	8001166 <lcd_init+0xaa>

	lcd_send_cmd(0x40+24);
 8001182:	2058      	movs	r0, #88	; 0x58
 8001184:	f000 f820 	bl	80011c8 <lcd_send_cmd>
	for (int i=0; i<8; i++) lcd_send_data(cc3[i]);
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
 800118c:	e009      	b.n	80011a2 <lcd_init+0xe6>
 800118e:	463a      	mov	r2, r7
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	4413      	add	r3, r2
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f85c 	bl	8001254 <lcd_send_data>
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	3301      	adds	r3, #1
 80011a0:	623b      	str	r3, [r7, #32]
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	2b07      	cmp	r3, #7
 80011a6:	ddf2      	ble.n	800118e <lcd_init+0xd2>

	lcd_send_cmd(0x80);
 80011a8:	2080      	movs	r0, #128	; 0x80
 80011aa:	f000 f80d 	bl	80011c8 <lcd_send_cmd>
}
 80011ae:	bf00      	nop
 80011b0:	3730      	adds	r7, #48	; 0x30
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	08002a5c 	.word	0x08002a5c
 80011bc:	08002a64 	.word	0x08002a64
 80011c0:	08002a6c 	.word	0x08002a6c
 80011c4:	08002a74 	.word	0x08002a74

080011c8 <lcd_send_cmd>:

void lcd_send_cmd(char cmd)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	 * G�nderilen y�ksek de�erlikli 4 bit temizlenir.
	 * Ard�ndan E = 1 yap�l�r ve ilk 4 bit lcd ye g�nderilir.
	 * Ve E = 0 yap�larak, son g�nderilen d���k de�erli 4 bit porttan silinir.
	 */

	data_u = (cmd & 0xF0);			// cmd & 0x11110000 -> 0xabcdefgh & 0x11110000 = 0xabcd0000	    ( Y�ksek de�erlikli 4 bit)
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f023 030f 	bic.w	r3, r3, #15
 80011d8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);	// (cmd << 4) & 0x11110000 -> 0xefgh & 0x11110000 = 0xefgh0000  ( D���k de�erlikli 4 bit)
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_u | 0x0C; 		// [en = 1 & rs = 0] 0xabcd0000 | 0x00001100 -> 0xabcd1100
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	f043 030c 	orr.w	r3, r3, #12
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	723b      	strb	r3, [r7, #8]
	I2C_Write(myDeviceAddress, data_t[0]);
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <lcd_send_cmd+0x88>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	7a3b      	ldrb	r3, [r7, #8]
 80011f2:	4619      	mov	r1, r3
 80011f4:	4610      	mov	r0, r2
 80011f6:	f000 f947 	bl	8001488 <I2C_Write>
	data_t[1] = data_u | 0x08;		// [en = 0 & rs = 0] 0xabcd0000 | 0x00001000 -> 0xabcd1000
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	b2db      	uxtb	r3, r3
 8001202:	727b      	strb	r3, [r7, #9]
	I2C_Write(myDeviceAddress, data_t[1]);
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <lcd_send_cmd+0x88>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	7a7b      	ldrb	r3, [r7, #9]
 800120c:	4619      	mov	r1, r3
 800120e:	4610      	mov	r0, r2
 8001210:	f000 f93a 	bl	8001488 <I2C_Write>
	data_t[2] = data_l | 0x0C;		// [en = 1 & rs = 0] 0xefgh0000 | 0x00001100 ->	0xefgh1100
 8001214:	7bbb      	ldrb	r3, [r7, #14]
 8001216:	f043 030c 	orr.w	r3, r3, #12
 800121a:	b2db      	uxtb	r3, r3
 800121c:	72bb      	strb	r3, [r7, #10]
	I2C_Write(myDeviceAddress, data_t[2]);
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <lcd_send_cmd+0x88>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	7abb      	ldrb	r3, [r7, #10]
 8001226:	4619      	mov	r1, r3
 8001228:	4610      	mov	r0, r2
 800122a:	f000 f92d 	bl	8001488 <I2C_Write>
	data_t[3] = data_l | 0x08;		// [en = 0 & rs = 0] 0xefgh0000	| 0x00001000 -> 0xefgh1000
 800122e:	7bbb      	ldrb	r3, [r7, #14]
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	b2db      	uxtb	r3, r3
 8001236:	72fb      	strb	r3, [r7, #11]
	I2C_Write(myDeviceAddress, data_t[3]);
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <lcd_send_cmd+0x88>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	7afb      	ldrb	r3, [r7, #11]
 8001240:	4619      	mov	r1, r3
 8001242:	4610      	mov	r0, r2
 8001244:	f000 f920 	bl	8001488 <I2C_Write>
}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000020 	.word	0x20000020

08001254 <lcd_send_data>:

void lcd_send_data(char data)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];

	data_u = (data & 0xF0);			// data & 0x11110000 -> 0xabcdefgh & 0x11110000 = 0xabcd0000
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f023 030f 	bic.w	r3, r3, #15
 8001264:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);	// (data << 4) & 0x11110000 -> 0xefgh & 0x11110000 = 0xefgh0000
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_u | 0x0D; 		// [en = 1 & rs = 1] 0xabcd0000 | 0x00001101 -> 0xabcd1101
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	f043 030d 	orr.w	r3, r3, #13
 8001272:	b2db      	uxtb	r3, r3
 8001274:	723b      	strb	r3, [r7, #8]
	I2C_Write(myDeviceAddress, data_t[0]);
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <lcd_send_data+0x88>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	7a3b      	ldrb	r3, [r7, #8]
 800127e:	4619      	mov	r1, r3
 8001280:	4610      	mov	r0, r2
 8001282:	f000 f901 	bl	8001488 <I2C_Write>
	data_t[1] = data_u | 0x09;		// [en = 0 & rs = 1] 0xabcd0000 | 0x00001001 -> 0xabcd1001
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	f043 0309 	orr.w	r3, r3, #9
 800128c:	b2db      	uxtb	r3, r3
 800128e:	727b      	strb	r3, [r7, #9]
	I2C_Write(myDeviceAddress, data_t[1]);
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <lcd_send_data+0x88>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	7a7b      	ldrb	r3, [r7, #9]
 8001298:	4619      	mov	r1, r3
 800129a:	4610      	mov	r0, r2
 800129c:	f000 f8f4 	bl	8001488 <I2C_Write>
	data_t[2] = data_l | 0x0D;		// [en = 1 & rs = 1] 0xefgh0000 | 0x00001100 ->	0xefgh1101
 80012a0:	7bbb      	ldrb	r3, [r7, #14]
 80012a2:	f043 030d 	orr.w	r3, r3, #13
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	72bb      	strb	r3, [r7, #10]
	I2C_Write(myDeviceAddress, data_t[2]);
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <lcd_send_data+0x88>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	7abb      	ldrb	r3, [r7, #10]
 80012b2:	4619      	mov	r1, r3
 80012b4:	4610      	mov	r0, r2
 80012b6:	f000 f8e7 	bl	8001488 <I2C_Write>
	data_t[3] = data_l | 0x09;		// [en = 0 & rs = 1] 0xefgh0000	| 0x00001000 -> 0xefgh1001
 80012ba:	7bbb      	ldrb	r3, [r7, #14]
 80012bc:	f043 0309 	orr.w	r3, r3, #9
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	72fb      	strb	r3, [r7, #11]
	I2C_Write(myDeviceAddress, data_t[3]);
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <lcd_send_data+0x88>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	7afb      	ldrb	r3, [r7, #11]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4610      	mov	r0, r2
 80012d0:	f000 f8da 	bl	8001488 <I2C_Write>
}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000020 	.word	0x20000020

080012e0 <lcd_sende_string>:

void lcd_sende_string(char *str)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	while(*str)
 80012e8:	e006      	b.n	80012f8 <lcd_sende_string+0x18>
		lcd_send_data(*str++);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ffae 	bl	8001254 <lcd_send_data>
	while(*str)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f4      	bne.n	80012ea <lcd_sende_string+0xa>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <delay>:
GPIO_InitTypeDef GPIO_InitStruct;
EXTI_InitTypeDef EXTI_InitStruct;
NVIC_InitTypeDef NVIC_InitStruct;
I2C_InitTypeDef I2C_InitStruct;

void delay(uint32_t time){
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	while(time--);
 8001310:	bf00      	nop
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	1e5a      	subs	r2, r3, #1
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1fa      	bne.n	8001312 <delay+0xa>
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <GPIO_Config>:

void GPIO_Config(){
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800132c:	2101      	movs	r1, #1
 800132e:	2001      	movs	r0, #1
 8001330:	f7ff fcfe 	bl	8000d30 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001334:	2101      	movs	r1, #1
 8001336:	2002      	movs	r0, #2
 8001338:	f7ff fcfa 	bl	8000d30 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800133c:	2101      	movs	r1, #1
 800133e:	2008      	movs	r0, #8
 8001340:	f7ff fcf6 	bl	8000d30 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8001344:	2101      	movs	r1, #1
 8001346:	2010      	movs	r0, #16
 8001348:	f7ff fcf2 	bl	8000d30 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 800134c:	4b33      	ldr	r3, [pc, #204]	; (800141c <GPIO_Config+0xf4>)
 800134e:	2200      	movs	r2, #0
 8001350:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0| GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
 8001352:	4b32      	ldr	r3, [pc, #200]	; (800141c <GPIO_Config+0xf4>)
 8001354:	220f      	movs	r2, #15
 8001356:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001358:	4b30      	ldr	r3, [pc, #192]	; (800141c <GPIO_Config+0xf4>)
 800135a:	2200      	movs	r2, #0
 800135c:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 800135e:	4b2f      	ldr	r3, [pc, #188]	; (800141c <GPIO_Config+0xf4>)
 8001360:	2202      	movs	r2, #2
 8001362:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8001364:	4b2d      	ldr	r3, [pc, #180]	; (800141c <GPIO_Config+0xf4>)
 8001366:	2203      	movs	r2, #3
 8001368:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	492c      	ldr	r1, [pc, #176]	; (800141c <GPIO_Config+0xf4>)
 800136c:	482c      	ldr	r0, [pc, #176]	; (8001420 <GPIO_Config+0xf8>)
 800136e:	f7ff f959 	bl	8000624 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <GPIO_Config+0xf4>)
 8001374:	2201      	movs	r2, #1
 8001376:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2;
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <GPIO_Config+0xf4>)
 800137a:	2207      	movs	r2, #7
 800137c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <GPIO_Config+0xf4>)
 8001380:	2200      	movs	r2, #0
 8001382:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8001384:	4b25      	ldr	r3, [pc, #148]	; (800141c <GPIO_Config+0xf4>)
 8001386:	2203      	movs	r2, #3
 8001388:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138a:	4924      	ldr	r1, [pc, #144]	; (800141c <GPIO_Config+0xf4>)
 800138c:	4825      	ldr	r0, [pc, #148]	; (8001424 <GPIO_Config+0xfc>)
 800138e:	f7ff f949 	bl	8000624 <GPIO_Init>

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 |
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <GPIO_Config+0xf4>)
 8001394:	227f      	movs	r2, #127	; 0x7f
 8001396:	601a      	str	r2, [r3, #0]
			GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8001398:	4b20      	ldr	r3, [pc, #128]	; (800141c <GPIO_Config+0xf4>)
 800139a:	2201      	movs	r2, #1
 800139c:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800139e:	4b1f      	ldr	r3, [pc, #124]	; (800141c <GPIO_Config+0xf4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <GPIO_Config+0xf4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <GPIO_Config+0xf4>)
 80013ac:	2203      	movs	r2, #3
 80013ae:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b0:	491a      	ldr	r1, [pc, #104]	; (800141c <GPIO_Config+0xf4>)
 80013b2:	481d      	ldr	r0, [pc, #116]	; (8001428 <GPIO_Config+0x100>)
 80013b4:	f7ff f936 	bl	8000624 <GPIO_Init>

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 |GPIO_Pin_3 ;
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <GPIO_Config+0xf4>)
 80013ba:	220f      	movs	r2, #15
 80013bc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <GPIO_Config+0xf4>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <GPIO_Config+0xf4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <GPIO_Config+0xf4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <GPIO_Config+0xf4>)
 80013d2:	2203      	movs	r2, #3
 80013d4:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d6:	4911      	ldr	r1, [pc, #68]	; (800141c <GPIO_Config+0xf4>)
 80013d8:	4814      	ldr	r0, [pc, #80]	; (800142c <GPIO_Config+0x104>)
 80013da:	f7ff f923 	bl	8000624 <GPIO_Init>


	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);	// SCL pin
 80013de:	2204      	movs	r2, #4
 80013e0:	2106      	movs	r1, #6
 80013e2:	4810      	ldr	r0, [pc, #64]	; (8001424 <GPIO_Config+0xfc>)
 80013e4:	f7ff f9fe 	bl	80007e4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_I2C1); // SDA pin
 80013e8:	2204      	movs	r2, #4
 80013ea:	2107      	movs	r1, #7
 80013ec:	480d      	ldr	r0, [pc, #52]	; (8001424 <GPIO_Config+0xfc>)
 80013ee:	f7ff f9f9 	bl	80007e4 <GPIO_PinAFConfig>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <GPIO_Config+0xf4>)
 80013f4:	2202      	movs	r2, #2
 80013f6:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // Pin6 SCL, Pin7 SDA
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <GPIO_Config+0xf4>)
 80013fa:	22c0      	movs	r2, #192	; 0xc0
 80013fc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <GPIO_Config+0xf4>)
 8001400:	2201      	movs	r2, #1
 8001402:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <GPIO_Config+0xf4>)
 8001406:	2201      	movs	r2, #1
 8001408:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <GPIO_Config+0xf4>)
 800140c:	2203      	movs	r2, #3
 800140e:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001410:	4902      	ldr	r1, [pc, #8]	; (800141c <GPIO_Config+0xf4>)
 8001412:	4804      	ldr	r0, [pc, #16]	; (8001424 <GPIO_Config+0xfc>)
 8001414:	f7ff f906 	bl	8000624 <GPIO_Init>
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000108 	.word	0x20000108
 8001420:	40020000 	.word	0x40020000
 8001424:	40020400 	.word	0x40020400
 8001428:	40021000 	.word	0x40021000
 800142c:	40020c00 	.word	0x40020c00

08001430 <I2C_Config>:

void I2C_Config()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001434:	2101      	movs	r1, #1
 8001436:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800143a:	f7ff fcb9 	bl	8000db0 <RCC_APB1PeriphClockCmd>

	I2C_InitStruct.I2C_Ack = ENABLE;
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <I2C_Config+0x4c>)
 8001440:	2201      	movs	r2, #1
 8001442:	815a      	strh	r2, [r3, #10]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <I2C_Config+0x4c>)
 8001446:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800144a:	819a      	strh	r2, [r3, #12]
	I2C_InitStruct.I2C_ClockSpeed = 400000;
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <I2C_Config+0x4c>)
 800144e:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <I2C_Config+0x50>)
 8001450:	601a      	str	r2, [r3, #0]
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <I2C_Config+0x4c>)
 8001454:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001458:	80da      	strh	r2, [r3, #6]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <I2C_Config+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	809a      	strh	r2, [r3, #4]
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <I2C_Config+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	811a      	strh	r2, [r3, #8]

	I2C_Init(I2C1, &I2C_InitStruct);
 8001466:	4905      	ldr	r1, [pc, #20]	; (800147c <I2C_Config+0x4c>)
 8001468:	4806      	ldr	r0, [pc, #24]	; (8001484 <I2C_Config+0x54>)
 800146a:	f7ff fa05 	bl	8000878 <I2C_Init>

	I2C_Cmd(I2C1, ENABLE);
 800146e:	2101      	movs	r1, #1
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <I2C_Config+0x54>)
 8001472:	f7ff fac3 	bl	80009fc <I2C_Cmd>
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000110 	.word	0x20000110
 8001480:	00061a80 	.word	0x00061a80
 8001484:	40005400 	.word	0x40005400

08001488 <I2C_Write>:

void I2C_Write(uint8_t address, uint8_t data)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	460a      	mov	r2, r1
 8001492:	71fb      	strb	r3, [r7, #7]
 8001494:	4613      	mov	r3, r2
 8001496:	71bb      	strb	r3, [r7, #6]
	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));  // I2C Meþgul olduðu sürece bekle
 8001498:	bf00      	nop
 800149a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800149e:	481a      	ldr	r0, [pc, #104]	; (8001508 <I2C_Write+0x80>)
 80014a0:	f7ff fb6a 	bl	8000b78 <I2C_GetFlagStatus>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f7      	bne.n	800149a <I2C_Write+0x12>

	I2C_GenerateSTART(I2C1, ENABLE);	// I2C Haberleþmesini baþlattýk.
 80014aa:	2101      	movs	r1, #1
 80014ac:	4816      	ldr	r0, [pc, #88]	; (8001508 <I2C_Write+0x80>)
 80014ae:	f7ff fac5 	bl	8000a3c <I2C_GenerateSTART>

	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 80014b2:	bf00      	nop
 80014b4:	4915      	ldr	r1, [pc, #84]	; (800150c <I2C_Write+0x84>)
 80014b6:	4814      	ldr	r0, [pc, #80]	; (8001508 <I2C_Write+0x80>)
 80014b8:	f7ff fb2e 	bl	8000b18 <I2C_CheckEvent>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f8      	beq.n	80014b4 <I2C_Write+0x2c>

	I2C_Send7bitAddress(I2C1, address, I2C_Direction_Transmitter);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	480f      	ldr	r0, [pc, #60]	; (8001508 <I2C_Write+0x80>)
 80014ca:	f7ff faf7 	bl	8000abc <I2C_Send7bitAddress>

	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ));
 80014ce:	bf00      	nop
 80014d0:	490f      	ldr	r1, [pc, #60]	; (8001510 <I2C_Write+0x88>)
 80014d2:	480d      	ldr	r0, [pc, #52]	; (8001508 <I2C_Write+0x80>)
 80014d4:	f7ff fb20 	bl	8000b18 <I2C_CheckEvent>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f8      	beq.n	80014d0 <I2C_Write+0x48>

	I2C_SendData(I2C1, data);
 80014de:	79bb      	ldrb	r3, [r7, #6]
 80014e0:	4619      	mov	r1, r3
 80014e2:	4809      	ldr	r0, [pc, #36]	; (8001508 <I2C_Write+0x80>)
 80014e4:	f7ff fb08 	bl	8000af8 <I2C_SendData>

	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80014e8:	bf00      	nop
 80014ea:	490a      	ldr	r1, [pc, #40]	; (8001514 <I2C_Write+0x8c>)
 80014ec:	4806      	ldr	r0, [pc, #24]	; (8001508 <I2C_Write+0x80>)
 80014ee:	f7ff fb13 	bl	8000b18 <I2C_CheckEvent>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f8      	beq.n	80014ea <I2C_Write+0x62>

	I2C_GenerateSTOP(I2C1, ENABLE);
 80014f8:	2101      	movs	r1, #1
 80014fa:	4803      	ldr	r0, [pc, #12]	; (8001508 <I2C_Write+0x80>)
 80014fc:	f7ff fabe 	bl	8000a7c <I2C_GenerateSTOP>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40005400 	.word	0x40005400
 800150c:	00030001 	.word	0x00030001
 8001510:	00070082 	.word	0x00070082
 8001514:	00070084 	.word	0x00070084

08001518 <lcd_send_int>:

void lcd_send_int(int num)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	char str[10];
	delay(10);
 8001520:	200a      	movs	r0, #10
 8001522:	f7ff fef1 	bl	8001308 <delay>
	sprintf(str, "%d", num);
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	4906      	ldr	r1, [pc, #24]	; (8001548 <lcd_send_int+0x30>)
 800152e:	4618      	mov	r0, r3
 8001530:	f001 fa4e 	bl	80029d0 <siprintf>
	lcd_sende_string(str);
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fed1 	bl	80012e0 <lcd_sende_string>
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	08002a7c 	.word	0x08002a7c

0800154c <RNG_Config>:

void RNG_Config()
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE);
 8001550:	2101      	movs	r1, #1
 8001552:	2040      	movs	r0, #64	; 0x40
 8001554:	f7ff fc0c 	bl	8000d70 <RCC_AHB2PeriphClockCmd>

	RNG_Cmd(ENABLE);
 8001558:	2001      	movs	r0, #1
 800155a:	f7ff fc69 	bl	8000e30 <RNG_Cmd>
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <EXTI_Config>:


void EXTI_Config()
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001568:	2101      	movs	r1, #1
 800156a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800156e:	f7ff fc3f 	bl	8000df0 <RCC_APB2PeriphClockCmd>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, GPIO_PinSource0);
 8001572:	2100      	movs	r1, #0
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff fcb1 	bl	8000edc <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, GPIO_PinSource1);
 800157a:	2101      	movs	r1, #1
 800157c:	2000      	movs	r0, #0
 800157e:	f7ff fcad 	bl	8000edc <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, GPIO_PinSource2);
 8001582:	2102      	movs	r1, #2
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff fca9 	bl	8000edc <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, GPIO_PinSource3);
 800158a:	2103      	movs	r1, #3
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff fca5 	bl	8000edc <SYSCFG_EXTILineConfig>

	EXTI_InitStruct.EXTI_Line = EXTI_Line0 | EXTI_Line1 | EXTI_Line2 | EXTI_Line3;
 8001592:	4b28      	ldr	r3, [pc, #160]	; (8001634 <EXTI_Config+0xd0>)
 8001594:	220f      	movs	r2, #15
 8001596:	601a      	str	r2, [r3, #0]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8001598:	4b26      	ldr	r3, [pc, #152]	; (8001634 <EXTI_Config+0xd0>)
 800159a:	2201      	movs	r2, #1
 800159c:	719a      	strb	r2, [r3, #6]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 800159e:	4b25      	ldr	r3, [pc, #148]	; (8001634 <EXTI_Config+0xd0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	711a      	strb	r2, [r3, #4]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 80015a4:	4b23      	ldr	r3, [pc, #140]	; (8001634 <EXTI_Config+0xd0>)
 80015a6:	2208      	movs	r2, #8
 80015a8:	715a      	strb	r2, [r3, #5]

	EXTI_Init(&EXTI_InitStruct);
 80015aa:	4822      	ldr	r0, [pc, #136]	; (8001634 <EXTI_Config+0xd0>)
 80015ac:	f7fe ff94 	bl	80004d8 <EXTI_Init>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 80015b0:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80015b4:	f7fe fe08 	bl	80001c8 <NVIC_PriorityGroupConfig>

	NVIC_InitStruct.NVIC_IRQChannel = EXTI0_IRQn;
 80015b8:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <EXTI_Config+0xd4>)
 80015ba:	2206      	movs	r2, #6
 80015bc:	701a      	strb	r2, [r3, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80015be:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <EXTI_Config+0xd4>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	70da      	strb	r2, [r3, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 80015c4:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <EXTI_Config+0xd4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	705a      	strb	r2, [r3, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 80015ca:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <EXTI_Config+0xd4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	709a      	strb	r2, [r3, #2]

	NVIC_Init(&NVIC_InitStruct);
 80015d0:	4819      	ldr	r0, [pc, #100]	; (8001638 <EXTI_Config+0xd4>)
 80015d2:	f7fe fe0d 	bl	80001f0 <NVIC_Init>

	NVIC_InitStruct.NVIC_IRQChannel = EXTI1_IRQn;
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <EXTI_Config+0xd4>)
 80015d8:	2207      	movs	r2, #7
 80015da:	701a      	strb	r2, [r3, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <EXTI_Config+0xd4>)
 80015de:	2201      	movs	r2, #1
 80015e0:	70da      	strb	r2, [r3, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 1;
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <EXTI_Config+0xd4>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	705a      	strb	r2, [r3, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <EXTI_Config+0xd4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	709a      	strb	r2, [r3, #2]

	NVIC_Init(&NVIC_InitStruct);
 80015ee:	4812      	ldr	r0, [pc, #72]	; (8001638 <EXTI_Config+0xd4>)
 80015f0:	f7fe fdfe 	bl	80001f0 <NVIC_Init>

	NVIC_InitStruct.NVIC_IRQChannel = EXTI2_IRQn;
 80015f4:	4b10      	ldr	r3, [pc, #64]	; (8001638 <EXTI_Config+0xd4>)
 80015f6:	2208      	movs	r2, #8
 80015f8:	701a      	strb	r2, [r3, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80015fa:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <EXTI_Config+0xd4>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	70da      	strb	r2, [r3, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 2;
 8001600:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <EXTI_Config+0xd4>)
 8001602:	2202      	movs	r2, #2
 8001604:	705a      	strb	r2, [r3, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8001606:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <EXTI_Config+0xd4>)
 8001608:	2200      	movs	r2, #0
 800160a:	709a      	strb	r2, [r3, #2]

	NVIC_Init(&NVIC_InitStruct);
 800160c:	480a      	ldr	r0, [pc, #40]	; (8001638 <EXTI_Config+0xd4>)
 800160e:	f7fe fdef 	bl	80001f0 <NVIC_Init>

	NVIC_InitStruct.NVIC_IRQChannel = EXTI3_IRQn;
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <EXTI_Config+0xd4>)
 8001614:	2209      	movs	r2, #9
 8001616:	701a      	strb	r2, [r3, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <EXTI_Config+0xd4>)
 800161a:	2201      	movs	r2, #1
 800161c:	70da      	strb	r2, [r3, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 3;
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <EXTI_Config+0xd4>)
 8001620:	2203      	movs	r2, #3
 8001622:	705a      	strb	r2, [r3, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <EXTI_Config+0xd4>)
 8001626:	2200      	movs	r2, #0
 8001628:	709a      	strb	r2, [r3, #2]

	NVIC_Init(&NVIC_InitStruct);
 800162a:	4803      	ldr	r0, [pc, #12]	; (8001638 <EXTI_Config+0xd4>)
 800162c:	f7fe fde0 	bl	80001f0 <NVIC_Init>
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000124 	.word	0x20000124
 8001638:	20000120 	.word	0x20000120

0800163c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(){
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line0) != RESET){
 8001640:	2001      	movs	r0, #1
 8001642:	f7fe ffbb 	bl	80005bc <EXTI_GetITStatus>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d034      	beq.n	80016b6 <EXTI0_IRQHandler+0x7a>

		button0 = GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0);
 800164c:	2101      	movs	r1, #1
 800164e:	481b      	ldr	r0, [pc, #108]	; (80016bc <EXTI0_IRQHandler+0x80>)
 8001650:	f7ff f876 	bl	8000740 <GPIO_ReadInputDataBit>
 8001654:	4603      	mov	r3, r0
 8001656:	461a      	mov	r2, r3
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <EXTI0_IRQHandler+0x84>)
 800165a:	601a      	str	r2, [r3, #0]
		led0 = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_0);
 800165c:	2101      	movs	r1, #1
 800165e:	4819      	ldr	r0, [pc, #100]	; (80016c4 <EXTI0_IRQHandler+0x88>)
 8001660:	f7ff f888 	bl	8000774 <GPIO_ReadOutputDataBit>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <EXTI0_IRQHandler+0x8c>)
 800166a:	601a      	str	r2, [r3, #0]

		if(led0==1){
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <EXTI0_IRQHandler+0x8c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d10d      	bne.n	8001690 <EXTI0_IRQHandler+0x54>
			if (button0 ==led0) {
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <EXTI0_IRQHandler+0x84>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <EXTI0_IRQHandler+0x8c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d117      	bne.n	80016b0 <EXTI0_IRQHandler+0x74>
			score0 = score0 + (1*h);
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <EXTI0_IRQHandler+0x90>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <EXTI0_IRQHandler+0x94>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4413      	add	r3, r2
 800168a:	4a10      	ldr	r2, [pc, #64]	; (80016cc <EXTI0_IRQHandler+0x90>)
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e00f      	b.n	80016b0 <EXTI0_IRQHandler+0x74>

			}
		}
		else if(button0 !=led0) {
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <EXTI0_IRQHandler+0x84>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <EXTI0_IRQHandler+0x8c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d009      	beq.n	80016b0 <EXTI0_IRQHandler+0x74>
			score0 = score0 - 1;
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <EXTI0_IRQHandler+0x90>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <EXTI0_IRQHandler+0x90>)
 80016a4:	6013      	str	r3, [r2, #0]
			try_count = try_count - 1 ;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <EXTI0_IRQHandler+0x98>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <EXTI0_IRQHandler+0x98>)
 80016ae:	6013      	str	r3, [r2, #0]
		}
		EXTI_ClearITPendingBit(EXTI_Line0);
 80016b0:	2001      	movs	r0, #1
 80016b2:	f7fe ffa7 	bl	8000604 <EXTI_ClearITPendingBit>
	}
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40020000 	.word	0x40020000
 80016c0:	20000064 	.word	0x20000064
 80016c4:	40020400 	.word	0x40020400
 80016c8:	20000058 	.word	0x20000058
 80016cc:	20000070 	.word	0x20000070
 80016d0:	20000038 	.word	0x20000038
 80016d4:	20000030 	.word	0x20000030

080016d8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(){
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line1) != RESET){
 80016dc:	2002      	movs	r0, #2
 80016de:	f7fe ff6d 	bl	80005bc <EXTI_GetITStatus>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d034      	beq.n	8001752 <EXTI1_IRQHandler+0x7a>

		button1 = GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1);
 80016e8:	2102      	movs	r1, #2
 80016ea:	481b      	ldr	r0, [pc, #108]	; (8001758 <EXTI1_IRQHandler+0x80>)
 80016ec:	f7ff f828 	bl	8000740 <GPIO_ReadInputDataBit>
 80016f0:	4603      	mov	r3, r0
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <EXTI1_IRQHandler+0x84>)
 80016f6:	601a      	str	r2, [r3, #0]
		led1 = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_1);
 80016f8:	2102      	movs	r1, #2
 80016fa:	4819      	ldr	r0, [pc, #100]	; (8001760 <EXTI1_IRQHandler+0x88>)
 80016fc:	f7ff f83a 	bl	8000774 <GPIO_ReadOutputDataBit>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <EXTI1_IRQHandler+0x8c>)
 8001706:	601a      	str	r2, [r3, #0]



		if(led1==1){
 8001708:	4b16      	ldr	r3, [pc, #88]	; (8001764 <EXTI1_IRQHandler+0x8c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d10d      	bne.n	800172c <EXTI1_IRQHandler+0x54>



			  if (button1 ==led1) {
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <EXTI1_IRQHandler+0x84>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <EXTI1_IRQHandler+0x8c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d117      	bne.n	800174c <EXTI1_IRQHandler+0x74>
			  score1 = score1 + (1*h);
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <EXTI1_IRQHandler+0x90>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <EXTI1_IRQHandler+0x94>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4413      	add	r3, r2
 8001726:	4a10      	ldr	r2, [pc, #64]	; (8001768 <EXTI1_IRQHandler+0x90>)
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e00f      	b.n	800174c <EXTI1_IRQHandler+0x74>

			  }

		}
		else if(button1 !=led1) {
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <EXTI1_IRQHandler+0x84>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <EXTI1_IRQHandler+0x8c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d009      	beq.n	800174c <EXTI1_IRQHandler+0x74>
				score1 = score1 - 1;
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <EXTI1_IRQHandler+0x90>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	3b01      	subs	r3, #1
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <EXTI1_IRQHandler+0x90>)
 8001740:	6013      	str	r3, [r2, #0]
				try_count -- ;
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <EXTI1_IRQHandler+0x98>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3b01      	subs	r3, #1
 8001748:	4a09      	ldr	r2, [pc, #36]	; (8001770 <EXTI1_IRQHandler+0x98>)
 800174a:	6013      	str	r3, [r2, #0]
		}



		EXTI_ClearITPendingBit(EXTI_Line1);
 800174c:	2002      	movs	r0, #2
 800174e:	f7fe ff59 	bl	8000604 <EXTI_ClearITPendingBit>
	}
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40020000 	.word	0x40020000
 800175c:	20000068 	.word	0x20000068
 8001760:	40020400 	.word	0x40020400
 8001764:	2000005c 	.word	0x2000005c
 8001768:	20000074 	.word	0x20000074
 800176c:	20000038 	.word	0x20000038
 8001770:	20000030 	.word	0x20000030

08001774 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(){
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line2) != RESET){
 8001778:	2004      	movs	r0, #4
 800177a:	f7fe ff1f 	bl	80005bc <EXTI_GetITStatus>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d034      	beq.n	80017ee <EXTI2_IRQHandler+0x7a>

		button2 = GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_2);
 8001784:	2104      	movs	r1, #4
 8001786:	481b      	ldr	r0, [pc, #108]	; (80017f4 <EXTI2_IRQHandler+0x80>)
 8001788:	f7fe ffda 	bl	8000740 <GPIO_ReadInputDataBit>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <EXTI2_IRQHandler+0x84>)
 8001792:	601a      	str	r2, [r3, #0]
		led2 = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_2);
 8001794:	2104      	movs	r1, #4
 8001796:	4819      	ldr	r0, [pc, #100]	; (80017fc <EXTI2_IRQHandler+0x88>)
 8001798:	f7fe ffec 	bl	8000774 <GPIO_ReadOutputDataBit>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <EXTI2_IRQHandler+0x8c>)
 80017a2:	601a      	str	r2, [r3, #0]



		if(led2==1){
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <EXTI2_IRQHandler+0x8c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d10d      	bne.n	80017c8 <EXTI2_IRQHandler+0x54>



			  if (button2 ==led2) {
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <EXTI2_IRQHandler+0x84>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <EXTI2_IRQHandler+0x8c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d117      	bne.n	80017e8 <EXTI2_IRQHandler+0x74>
			  score2 = score2 + (1*h);
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <EXTI2_IRQHandler+0x90>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <EXTI2_IRQHandler+0x94>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4413      	add	r3, r2
 80017c2:	4a10      	ldr	r2, [pc, #64]	; (8001804 <EXTI2_IRQHandler+0x90>)
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e00f      	b.n	80017e8 <EXTI2_IRQHandler+0x74>

			  }

		}
		else if(button2 !=led2) {
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <EXTI2_IRQHandler+0x84>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <EXTI2_IRQHandler+0x8c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d009      	beq.n	80017e8 <EXTI2_IRQHandler+0x74>
				score2 = score2 - 1;
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <EXTI2_IRQHandler+0x90>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	3b01      	subs	r3, #1
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <EXTI2_IRQHandler+0x90>)
 80017dc:	6013      	str	r3, [r2, #0]
				try_count -- ;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <EXTI2_IRQHandler+0x98>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	4a09      	ldr	r2, [pc, #36]	; (800180c <EXTI2_IRQHandler+0x98>)
 80017e6:	6013      	str	r3, [r2, #0]
		}



		EXTI_ClearITPendingBit(EXTI_Line2);
 80017e8:	2004      	movs	r0, #4
 80017ea:	f7fe ff0b 	bl	8000604 <EXTI_ClearITPendingBit>
	}
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40020000 	.word	0x40020000
 80017f8:	2000006c 	.word	0x2000006c
 80017fc:	40020400 	.word	0x40020400
 8001800:	20000060 	.word	0x20000060
 8001804:	20000078 	.word	0x20000078
 8001808:	20000038 	.word	0x20000038
 800180c:	20000030 	.word	0x20000030

08001810 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(){
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line3) != RESET){
 8001814:	2008      	movs	r0, #8
 8001816:	f7fe fed1 	bl	80005bc <EXTI_GetITStatus>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d016      	beq.n	800184e <EXTI3_IRQHandler+0x3e>

		if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_3))
 8001820:	2108      	movs	r1, #8
 8001822:	480d      	ldr	r0, [pc, #52]	; (8001858 <EXTI3_IRQHandler+0x48>)
 8001824:	f7fe ff8c 	bl	8000740 <GPIO_ReadInputDataBit>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00f      	beq.n	800184e <EXTI3_IRQHandler+0x3e>
			  {
				  while(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_3));
 800182e:	bf00      	nop
 8001830:	2108      	movs	r1, #8
 8001832:	4809      	ldr	r0, [pc, #36]	; (8001858 <EXTI3_IRQHandler+0x48>)
 8001834:	f7fe ff84 	bl	8000740 <GPIO_ReadInputDataBit>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f8      	bne.n	8001830 <EXTI3_IRQHandler+0x20>
				  delay(1680000);
 800183e:	4807      	ldr	r0, [pc, #28]	; (800185c <EXTI3_IRQHandler+0x4c>)
 8001840:	f7ff fd62 	bl	8001308 <delay>

				  hile_counter++;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <EXTI3_IRQHandler+0x50>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	3301      	adds	r3, #1
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <EXTI3_IRQHandler+0x50>)
 800184c:	6013      	str	r3, [r2, #0]



	}

	EXTI_ClearITPendingBit(EXTI_Line3);
 800184e:	2008      	movs	r0, #8
 8001850:	f7fe fed8 	bl	8000604 <EXTI_ClearITPendingBit>
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40020000 	.word	0x40020000
 800185c:	0019a280 	.word	0x0019a280
 8001860:	20000034 	.word	0x20000034

08001864 <main>:
void greeting();
void showLED(int i) ;



int main(void){
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  	GPIO_Config();
 8001868:	f7ff fd5e 	bl	8001328 <GPIO_Config>
	EXTI_Config();
 800186c:	f7ff fe7a 	bl	8001564 <EXTI_Config>
	RNG_Config();
 8001870:	f7ff fe6c 	bl	800154c <RNG_Config>
	I2C_Config();
 8001874:	f7ff fddc 	bl	8001430 <I2C_Config>
	lcd_init();
 8001878:	f7ff fc20 	bl	80010bc <lcd_init>

	//ssssslcd_send_cmd(0x01);

	greeting();
 800187c:	f000 fb60 	bl	8001f40 <greeting>


	lcd_send_cmd(0x80);
 8001880:	2080      	movs	r0, #128	; 0x80
 8001882:	f7ff fca1 	bl	80011c8 <lcd_send_cmd>
	lcd_sende_string("SCR");
 8001886:	48b0      	ldr	r0, [pc, #704]	; (8001b48 <main+0x2e4>)
 8001888:	f7ff fd2a 	bl	80012e0 <lcd_sende_string>
	lcd_send_cmd(0x8D);
 800188c:	208d      	movs	r0, #141	; 0x8d
 800188e:	f7ff fc9b 	bl	80011c8 <lcd_send_cmd>
	lcd_sende_string("LVL");
 8001892:	48ae      	ldr	r0, [pc, #696]	; (8001b4c <main+0x2e8>)
 8001894:	f7ff fd24 	bl	80012e0 <lcd_sende_string>

	lcd_send_cmd(0x86);///??????????????????????????????????
 8001898:	2086      	movs	r0, #134	; 0x86
 800189a:	f7ff fc95 	bl	80011c8 <lcd_send_cmd>
	lcd_send_data(0);
 800189e:	2000      	movs	r0, #0
 80018a0:	f7ff fcd8 	bl	8001254 <lcd_send_data>
	lcd_send_cmd(0x87);
 80018a4:	2087      	movs	r0, #135	; 0x87
 80018a6:	f7ff fc8f 	bl	80011c8 <lcd_send_cmd>
	lcd_send_data(0);
 80018aa:	2000      	movs	r0, #0
 80018ac:	f7ff fcd2 	bl	8001254 <lcd_send_data>
	lcd_send_cmd(0x88);
 80018b0:	2088      	movs	r0, #136	; 0x88
 80018b2:	f7ff fc89 	bl	80011c8 <lcd_send_cmd>
	lcd_send_data(0);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f7ff fccc 	bl	8001254 <lcd_send_data>

  while (1)
  {
	  random1 = RNG_GetRandomNumber();
 80018bc:	f7ff fad6 	bl	8000e6c <RNG_GetRandomNumber>
 80018c0:	4602      	mov	r2, r0
 80018c2:	4ba3      	ldr	r3, [pc, #652]	; (8001b50 <main+0x2ec>)
 80018c4:	601a      	str	r2, [r3, #0]
	  random2= random1 %8;
 80018c6:	4ba2      	ldr	r3, [pc, #648]	; (8001b50 <main+0x2ec>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	4aa1      	ldr	r2, [pc, #644]	; (8001b54 <main+0x2f0>)
 80018d0:	6013      	str	r3, [r2, #0]

	  if(try_count > 0){
 80018d2:	4ba1      	ldr	r3, [pc, #644]	; (8001b58 <main+0x2f4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f340 80db 	ble.w	8001a92 <main+0x22e>



	  switch (random2){
 80018dc:	4b9d      	ldr	r3, [pc, #628]	; (8001b54 <main+0x2f0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b07      	cmp	r3, #7
 80018e2:	f200 80c3 	bhi.w	8001a6c <main+0x208>
 80018e6:	a201      	add	r2, pc, #4	; (adr r2, 80018ec <main+0x88>)
 80018e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ec:	0800190d 	.word	0x0800190d
 80018f0:	0800191d 	.word	0x0800191d
 80018f4:	0800194d 	.word	0x0800194d
 80018f8:	0800197d 	.word	0x0800197d
 80018fc:	080019ad 	.word	0x080019ad
 8001900:	080019dd 	.word	0x080019dd
 8001904:	08001a0d 	.word	0x08001a0d
 8001908:	08001a3d 	.word	0x08001a3d

	      case 0://leds=[0,0,0,0];
	    	  GPIO_ResetBits(GPIOB, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2| GPIO_Pin_3);
 800190c:	210f      	movs	r1, #15
 800190e:	4893      	ldr	r0, [pc, #588]	; (8001b5c <main+0x2f8>)
 8001910:	f7fe ff59 	bl	80007c6 <GPIO_ResetBits>
	    	  showLED(0) ;
 8001914:	2000      	movs	r0, #0
 8001916:	f000 fd13 	bl	8002340 <showLED>
	    	  break;
 800191a:	e0ba      	b.n	8001a92 <main+0x22e>

	      case 1://leds=[0,0,0,1]
	    	  GPIO_SetBits( GPIOB, GPIO_Pin_0);
 800191c:	2101      	movs	r1, #1
 800191e:	488f      	ldr	r0, [pc, #572]	; (8001b5c <main+0x2f8>)
 8001920:	f7fe ff42 	bl	80007a8 <GPIO_SetBits>
	    	  delay(10000000*y*x);
 8001924:	4b8e      	ldr	r3, [pc, #568]	; (8001b60 <main+0x2fc>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a8e      	ldr	r2, [pc, #568]	; (8001b64 <main+0x300>)
 800192a:	fb02 f303 	mul.w	r3, r2, r3
 800192e:	4a8e      	ldr	r2, [pc, #568]	; (8001b68 <main+0x304>)
 8001930:	6812      	ldr	r2, [r2, #0]
 8001932:	fb02 f303 	mul.w	r3, r2, r3
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fce6 	bl	8001308 <delay>
	    	  GPIO_ResetBits(GPIOB, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2| GPIO_Pin_3);
 800193c:	210f      	movs	r1, #15
 800193e:	4887      	ldr	r0, [pc, #540]	; (8001b5c <main+0x2f8>)
 8001940:	f7fe ff41 	bl	80007c6 <GPIO_ResetBits>
	    	  showLED(1) ;
 8001944:	2001      	movs	r0, #1
 8001946:	f000 fcfb 	bl	8002340 <showLED>
	    	  break;
 800194a:	e0a2      	b.n	8001a92 <main+0x22e>

	      case 2 ://leds=[0,0,1,0]
	    	  GPIO_SetBits(GPIOB,  GPIO_Pin_1);
 800194c:	2102      	movs	r1, #2
 800194e:	4883      	ldr	r0, [pc, #524]	; (8001b5c <main+0x2f8>)
 8001950:	f7fe ff2a 	bl	80007a8 <GPIO_SetBits>
	    	  delay(10000000*y*x);
 8001954:	4b82      	ldr	r3, [pc, #520]	; (8001b60 <main+0x2fc>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a82      	ldr	r2, [pc, #520]	; (8001b64 <main+0x300>)
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	4a82      	ldr	r2, [pc, #520]	; (8001b68 <main+0x304>)
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	fb02 f303 	mul.w	r3, r2, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fcce 	bl	8001308 <delay>
	    	  GPIO_ResetBits(GPIOB, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2| GPIO_Pin_3);
 800196c:	210f      	movs	r1, #15
 800196e:	487b      	ldr	r0, [pc, #492]	; (8001b5c <main+0x2f8>)
 8001970:	f7fe ff29 	bl	80007c6 <GPIO_ResetBits>
	    	  showLED(2) ;
 8001974:	2002      	movs	r0, #2
 8001976:	f000 fce3 	bl	8002340 <showLED>

	    	  break;
 800197a:	e08a      	b.n	8001a92 <main+0x22e>

	      case 3 ://leds=[0,0,1,1]
	    	  GPIO_SetBits(GPIOB,  GPIO_Pin_0| GPIO_Pin_1);
 800197c:	2103      	movs	r1, #3
 800197e:	4877      	ldr	r0, [pc, #476]	; (8001b5c <main+0x2f8>)
 8001980:	f7fe ff12 	bl	80007a8 <GPIO_SetBits>
	    	  delay(10000000*x*y);
 8001984:	4b78      	ldr	r3, [pc, #480]	; (8001b68 <main+0x304>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a76      	ldr	r2, [pc, #472]	; (8001b64 <main+0x300>)
 800198a:	fb02 f303 	mul.w	r3, r2, r3
 800198e:	4a74      	ldr	r2, [pc, #464]	; (8001b60 <main+0x2fc>)
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fcb6 	bl	8001308 <delay>
	    	  GPIO_ResetBits(GPIOB, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2| GPIO_Pin_3);
 800199c:	210f      	movs	r1, #15
 800199e:	486f      	ldr	r0, [pc, #444]	; (8001b5c <main+0x2f8>)
 80019a0:	f7fe ff11 	bl	80007c6 <GPIO_ResetBits>
	    	  showLED(3) ;
 80019a4:	2003      	movs	r0, #3
 80019a6:	f000 fccb 	bl	8002340 <showLED>
	    	  break;
 80019aa:	e072      	b.n	8001a92 <main+0x22e>

	      case 4 ://leds=[0,1,0,0]
	      	  GPIO_SetBits(GPIOB,  GPIO_Pin_2);
 80019ac:	2104      	movs	r1, #4
 80019ae:	486b      	ldr	r0, [pc, #428]	; (8001b5c <main+0x2f8>)
 80019b0:	f7fe fefa 	bl	80007a8 <GPIO_SetBits>
	      	  delay(10000000*x*y);
 80019b4:	4b6c      	ldr	r3, [pc, #432]	; (8001b68 <main+0x304>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a6a      	ldr	r2, [pc, #424]	; (8001b64 <main+0x300>)
 80019ba:	fb02 f303 	mul.w	r3, r2, r3
 80019be:	4a68      	ldr	r2, [pc, #416]	; (8001b60 <main+0x2fc>)
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	fb02 f303 	mul.w	r3, r2, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fc9e 	bl	8001308 <delay>
	      	  GPIO_ResetBits(GPIOB, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2| GPIO_Pin_3);
 80019cc:	210f      	movs	r1, #15
 80019ce:	4863      	ldr	r0, [pc, #396]	; (8001b5c <main+0x2f8>)
 80019d0:	f7fe fef9 	bl	80007c6 <GPIO_ResetBits>
	    	  showLED(4) ;
 80019d4:	2004      	movs	r0, #4
 80019d6:	f000 fcb3 	bl	8002340 <showLED>
	      	  break;
 80019da:	e05a      	b.n	8001a92 <main+0x22e>

	      case 5 ://leds=[0,1,0,1]
	      	 GPIO_SetBits(GPIOB,  GPIO_Pin_0| GPIO_Pin_2);
 80019dc:	2105      	movs	r1, #5
 80019de:	485f      	ldr	r0, [pc, #380]	; (8001b5c <main+0x2f8>)
 80019e0:	f7fe fee2 	bl	80007a8 <GPIO_SetBits>
	      	 delay(10000000*x*y);
 80019e4:	4b60      	ldr	r3, [pc, #384]	; (8001b68 <main+0x304>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a5e      	ldr	r2, [pc, #376]	; (8001b64 <main+0x300>)
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	4a5c      	ldr	r2, [pc, #368]	; (8001b60 <main+0x2fc>)
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	fb02 f303 	mul.w	r3, r2, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fc86 	bl	8001308 <delay>
	      	 GPIO_ResetBits(GPIOB, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2| GPIO_Pin_3);
 80019fc:	210f      	movs	r1, #15
 80019fe:	4857      	ldr	r0, [pc, #348]	; (8001b5c <main+0x2f8>)
 8001a00:	f7fe fee1 	bl	80007c6 <GPIO_ResetBits>
	    	 showLED(5) ;
 8001a04:	2005      	movs	r0, #5
 8001a06:	f000 fc9b 	bl	8002340 <showLED>
	      	 break;
 8001a0a:	e042      	b.n	8001a92 <main+0x22e>

	      case 6 ://leds=[0,1,1,0]
	      	 GPIO_SetBits(GPIOB,  GPIO_Pin_1| GPIO_Pin_2);
 8001a0c:	2106      	movs	r1, #6
 8001a0e:	4853      	ldr	r0, [pc, #332]	; (8001b5c <main+0x2f8>)
 8001a10:	f7fe feca 	bl	80007a8 <GPIO_SetBits>
	      	 delay(10000000*x*y);
 8001a14:	4b54      	ldr	r3, [pc, #336]	; (8001b68 <main+0x304>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a52      	ldr	r2, [pc, #328]	; (8001b64 <main+0x300>)
 8001a1a:	fb02 f303 	mul.w	r3, r2, r3
 8001a1e:	4a50      	ldr	r2, [pc, #320]	; (8001b60 <main+0x2fc>)
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fc6e 	bl	8001308 <delay>
	      	 GPIO_ResetBits(GPIOB, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2| GPIO_Pin_3);
 8001a2c:	210f      	movs	r1, #15
 8001a2e:	484b      	ldr	r0, [pc, #300]	; (8001b5c <main+0x2f8>)
 8001a30:	f7fe fec9 	bl	80007c6 <GPIO_ResetBits>
	      	 showLED(6) ;
 8001a34:	2006      	movs	r0, #6
 8001a36:	f000 fc83 	bl	8002340 <showLED>
	      	 break;
 8001a3a:	e02a      	b.n	8001a92 <main+0x22e>

	      case 7 ://leds=[0,1,1,1]
			  GPIO_SetBits(GPIOB,  GPIO_Pin_0| GPIO_Pin_1| GPIO_Pin_2);
 8001a3c:	2107      	movs	r1, #7
 8001a3e:	4847      	ldr	r0, [pc, #284]	; (8001b5c <main+0x2f8>)
 8001a40:	f7fe feb2 	bl	80007a8 <GPIO_SetBits>
			  delay(10000000*x*y);
 8001a44:	4b48      	ldr	r3, [pc, #288]	; (8001b68 <main+0x304>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a46      	ldr	r2, [pc, #280]	; (8001b64 <main+0x300>)
 8001a4a:	fb02 f303 	mul.w	r3, r2, r3
 8001a4e:	4a44      	ldr	r2, [pc, #272]	; (8001b60 <main+0x2fc>)
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	fb02 f303 	mul.w	r3, r2, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fc56 	bl	8001308 <delay>
			  GPIO_ResetBits(GPIOB, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2| GPIO_Pin_3);
 8001a5c:	210f      	movs	r1, #15
 8001a5e:	483f      	ldr	r0, [pc, #252]	; (8001b5c <main+0x2f8>)
 8001a60:	f7fe feb1 	bl	80007c6 <GPIO_ResetBits>
			  showLED(7) ;
 8001a64:	2007      	movs	r0, #7
 8001a66:	f000 fc6b 	bl	8002340 <showLED>
			  break;
 8001a6a:	e012      	b.n	8001a92 <main+0x22e>
	      case 7 :leds=[0,1,1,1] break;

*/
	  default:
		  //led[]={0,0,0,0};// default statements
		  GPIO_ResetBits(GPIOB, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2| GPIO_Pin_3);
 8001a6c:	210f      	movs	r1, #15
 8001a6e:	483b      	ldr	r0, [pc, #236]	; (8001b5c <main+0x2f8>)
 8001a70:	f7fe fea9 	bl	80007c6 <GPIO_ResetBits>
		  delay(10000000*x*y);
 8001a74:	4b3c      	ldr	r3, [pc, #240]	; (8001b68 <main+0x304>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a3a      	ldr	r2, [pc, #232]	; (8001b64 <main+0x300>)
 8001a7a:	fb02 f303 	mul.w	r3, r2, r3
 8001a7e:	4a38      	ldr	r2, [pc, #224]	; (8001b60 <main+0x2fc>)
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fc3e 	bl	8001308 <delay>
		  showLED(0) ;
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f000 fc57 	bl	8002340 <showLED>
	  }

	  }
	  //**************************************

	  switch(h)
 8001a92:	4b36      	ldr	r3, [pc, #216]	; (8001b6c <main+0x308>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d06e      	beq.n	8001b78 <main+0x314>
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	f000 80bd 	beq.w	8001c1a <main+0x3b6>
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	f040 810b 	bne.w	8001cbc <main+0x458>
	 	  {
	 	  	  case 1:
	 	  	  {
	 	  		  GPIO_SetBits(GPIOD, GPIO_Pin_0);
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4831      	ldr	r0, [pc, #196]	; (8001b70 <main+0x30c>)
 8001aaa:	f7fe fe7d 	bl	80007a8 <GPIO_SetBits>
	 	  		  GPIO_SetBits(GPIOE, GPIO_Pin_1 | GPIO_Pin_2);
 8001aae:	2106      	movs	r1, #6
 8001ab0:	4830      	ldr	r0, [pc, #192]	; (8001b74 <main+0x310>)
 8001ab2:	f7fe fe79 	bl	80007a8 <GPIO_SetBits>
	 	  		  GPIO_ResetBits(GPIOE, GPIO_Pin_0 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6);
 8001ab6:	2179      	movs	r1, #121	; 0x79
 8001ab8:	482e      	ldr	r0, [pc, #184]	; (8001b74 <main+0x310>)
 8001aba:	f7fe fe84 	bl	80007c6 <GPIO_ResetBits>
	 	  		  delay(16800);
 8001abe:	f244 10a0 	movw	r0, #16800	; 0x41a0
 8001ac2:	f7ff fc21 	bl	8001308 <delay>
	 	  		  GPIO_ResetBits(GPIOD, GPIO_Pin_0);
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	4829      	ldr	r0, [pc, #164]	; (8001b70 <main+0x30c>)
 8001aca:	f7fe fe7c 	bl	80007c6 <GPIO_ResetBits>
	 	  		  GPIO_SetBits(GPIOD, GPIO_Pin_1);
 8001ace:	2102      	movs	r1, #2
 8001ad0:	4827      	ldr	r0, [pc, #156]	; (8001b70 <main+0x30c>)
 8001ad2:	f7fe fe69 	bl	80007a8 <GPIO_SetBits>
	 	  		  GPIO_SetBits(GPIOE, GPIO_Pin_1 | GPIO_Pin_2);
 8001ad6:	2106      	movs	r1, #6
 8001ad8:	4826      	ldr	r0, [pc, #152]	; (8001b74 <main+0x310>)
 8001ada:	f7fe fe65 	bl	80007a8 <GPIO_SetBits>
	 	  		  GPIO_ResetBits(GPIOE, GPIO_Pin_0 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6);
 8001ade:	2179      	movs	r1, #121	; 0x79
 8001ae0:	4824      	ldr	r0, [pc, #144]	; (8001b74 <main+0x310>)
 8001ae2:	f7fe fe70 	bl	80007c6 <GPIO_ResetBits>
	 	  		  delay(16800);
 8001ae6:	f244 10a0 	movw	r0, #16800	; 0x41a0
 8001aea:	f7ff fc0d 	bl	8001308 <delay>
	 	  		  GPIO_ResetBits(GPIOD, GPIO_Pin_1);
 8001aee:	2102      	movs	r1, #2
 8001af0:	481f      	ldr	r0, [pc, #124]	; (8001b70 <main+0x30c>)
 8001af2:	f7fe fe68 	bl	80007c6 <GPIO_ResetBits>
	 	  		  GPIO_SetBits(GPIOD, GPIO_Pin_2);
 8001af6:	2104      	movs	r1, #4
 8001af8:	481d      	ldr	r0, [pc, #116]	; (8001b70 <main+0x30c>)
 8001afa:	f7fe fe55 	bl	80007a8 <GPIO_SetBits>
	 	  		  GPIO_SetBits(GPIOE, GPIO_Pin_1 | GPIO_Pin_2);
 8001afe:	2106      	movs	r1, #6
 8001b00:	481c      	ldr	r0, [pc, #112]	; (8001b74 <main+0x310>)
 8001b02:	f7fe fe51 	bl	80007a8 <GPIO_SetBits>
	 	  		  GPIO_ResetBits(GPIOE, GPIO_Pin_0 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6);
 8001b06:	2179      	movs	r1, #121	; 0x79
 8001b08:	481a      	ldr	r0, [pc, #104]	; (8001b74 <main+0x310>)
 8001b0a:	f7fe fe5c 	bl	80007c6 <GPIO_ResetBits>
	 	  		  delay(16800);
 8001b0e:	f244 10a0 	movw	r0, #16800	; 0x41a0
 8001b12:	f7ff fbf9 	bl	8001308 <delay>
	 	  		 GPIO_ResetBits(GPIOD, GPIO_Pin_2);
 8001b16:	2104      	movs	r1, #4
 8001b18:	4815      	ldr	r0, [pc, #84]	; (8001b70 <main+0x30c>)
 8001b1a:	f7fe fe54 	bl	80007c6 <GPIO_ResetBits>
	 	  		  GPIO_SetBits(GPIOD, GPIO_Pin_3);
 8001b1e:	2108      	movs	r1, #8
 8001b20:	4813      	ldr	r0, [pc, #76]	; (8001b70 <main+0x30c>)
 8001b22:	f7fe fe41 	bl	80007a8 <GPIO_SetBits>
	 	  		  GPIO_SetBits(GPIOE, GPIO_Pin_1 | GPIO_Pin_2);
 8001b26:	2106      	movs	r1, #6
 8001b28:	4812      	ldr	r0, [pc, #72]	; (8001b74 <main+0x310>)
 8001b2a:	f7fe fe3d 	bl	80007a8 <GPIO_SetBits>
	 	  		  GPIO_ResetBits(GPIOE, GPIO_Pin_0 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6);
 8001b2e:	2179      	movs	r1, #121	; 0x79
 8001b30:	4810      	ldr	r0, [pc, #64]	; (8001b74 <main+0x310>)
 8001b32:	f7fe fe48 	bl	80007c6 <GPIO_ResetBits>
	 	  		  delay(16800);
 8001b36:	f244 10a0 	movw	r0, #16800	; 0x41a0
 8001b3a:	f7ff fbe5 	bl	8001308 <delay>
	 	  		 GPIO_ResetBits(GPIOD, GPIO_Pin_3);
 8001b3e:	2108      	movs	r1, #8
 8001b40:	480b      	ldr	r0, [pc, #44]	; (8001b70 <main+0x30c>)
 8001b42:	f7fe fe40 	bl	80007c6 <GPIO_ResetBits>


	 	  		  break;
 8001b46:	e0be      	b.n	8001cc6 <main+0x462>
 8001b48:	08002a80 	.word	0x08002a80
 8001b4c:	08002a84 	.word	0x08002a84
 8001b50:	20000100 	.word	0x20000100
 8001b54:	20000104 	.word	0x20000104
 8001b58:	20000030 	.word	0x20000030
 8001b5c:	40020400 	.word	0x40020400
 8001b60:	20000028 	.word	0x20000028
 8001b64:	00989680 	.word	0x00989680
 8001b68:	20000024 	.word	0x20000024
 8001b6c:	20000038 	.word	0x20000038
 8001b70:	40020c00 	.word	0x40020c00
 8001b74:	40021000 	.word	0x40021000
	 	  	  }
	 	  	  case 2:
	 	  	  {
	 	  		  	  	  	  GPIO_SetBits(GPIOD, GPIO_Pin_0);
 8001b78:	2101      	movs	r1, #1
 8001b7a:	48a7      	ldr	r0, [pc, #668]	; (8001e18 <main+0x5b4>)
 8001b7c:	f7fe fe14 	bl	80007a8 <GPIO_SetBits>
	 	  			  		  GPIO_SetBits(GPIOE, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_3 |GPIO_Pin_4 | GPIO_Pin_5);
 8001b80:	213b      	movs	r1, #59	; 0x3b
 8001b82:	48a6      	ldr	r0, [pc, #664]	; (8001e1c <main+0x5b8>)
 8001b84:	f7fe fe10 	bl	80007a8 <GPIO_SetBits>
	 	  			  		  GPIO_ResetBits(GPIOE, GPIO_Pin_2 | GPIO_Pin_6);
 8001b88:	2144      	movs	r1, #68	; 0x44
 8001b8a:	48a4      	ldr	r0, [pc, #656]	; (8001e1c <main+0x5b8>)
 8001b8c:	f7fe fe1b 	bl	80007c6 <GPIO_ResetBits>
	 	  			  		  delay(16800);
 8001b90:	f244 10a0 	movw	r0, #16800	; 0x41a0
 8001b94:	f7ff fbb8 	bl	8001308 <delay>
	 	  			  		GPIO_ResetBits(GPIOD, GPIO_Pin_0);
 8001b98:	2101      	movs	r1, #1
 8001b9a:	489f      	ldr	r0, [pc, #636]	; (8001e18 <main+0x5b4>)
 8001b9c:	f7fe fe13 	bl	80007c6 <GPIO_ResetBits>
	 	  			  		  GPIO_SetBits(GPIOD, GPIO_Pin_1);
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	489d      	ldr	r0, [pc, #628]	; (8001e18 <main+0x5b4>)
 8001ba4:	f7fe fe00 	bl	80007a8 <GPIO_SetBits>
	 	  			  		  GPIO_SetBits(GPIOE, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_3 |GPIO_Pin_4 | GPIO_Pin_5);
 8001ba8:	213b      	movs	r1, #59	; 0x3b
 8001baa:	489c      	ldr	r0, [pc, #624]	; (8001e1c <main+0x5b8>)
 8001bac:	f7fe fdfc 	bl	80007a8 <GPIO_SetBits>
	 	  			  		  GPIO_ResetBits(GPIOE, GPIO_Pin_2 | GPIO_Pin_6);
 8001bb0:	2144      	movs	r1, #68	; 0x44
 8001bb2:	489a      	ldr	r0, [pc, #616]	; (8001e1c <main+0x5b8>)
 8001bb4:	f7fe fe07 	bl	80007c6 <GPIO_ResetBits>
	 	  			  		  delay(16800);
 8001bb8:	f244 10a0 	movw	r0, #16800	; 0x41a0
 8001bbc:	f7ff fba4 	bl	8001308 <delay>
	 	  			  		GPIO_ResetBits(GPIOD, GPIO_Pin_1);
 8001bc0:	2102      	movs	r1, #2
 8001bc2:	4895      	ldr	r0, [pc, #596]	; (8001e18 <main+0x5b4>)
 8001bc4:	f7fe fdff 	bl	80007c6 <GPIO_ResetBits>
	 	  			  		  GPIO_SetBits(GPIOD, GPIO_Pin_2);
 8001bc8:	2104      	movs	r1, #4
 8001bca:	4893      	ldr	r0, [pc, #588]	; (8001e18 <main+0x5b4>)
 8001bcc:	f7fe fdec 	bl	80007a8 <GPIO_SetBits>
	 	  			  		  GPIO_SetBits(GPIOE, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_3 |GPIO_Pin_4 | GPIO_Pin_5);
 8001bd0:	213b      	movs	r1, #59	; 0x3b
 8001bd2:	4892      	ldr	r0, [pc, #584]	; (8001e1c <main+0x5b8>)
 8001bd4:	f7fe fde8 	bl	80007a8 <GPIO_SetBits>
	 	  			  		  GPIO_ResetBits(GPIOE, GPIO_Pin_2 | GPIO_Pin_6);
 8001bd8:	2144      	movs	r1, #68	; 0x44
 8001bda:	4890      	ldr	r0, [pc, #576]	; (8001e1c <main+0x5b8>)
 8001bdc:	f7fe fdf3 	bl	80007c6 <GPIO_ResetBits>
	 	  			  		  delay(16800);
 8001be0:	f244 10a0 	movw	r0, #16800	; 0x41a0
 8001be4:	f7ff fb90 	bl	8001308 <delay>
	 	  			  		GPIO_ResetBits(GPIOD, GPIO_Pin_2);
 8001be8:	2104      	movs	r1, #4
 8001bea:	488b      	ldr	r0, [pc, #556]	; (8001e18 <main+0x5b4>)
 8001bec:	f7fe fdeb 	bl	80007c6 <GPIO_ResetBits>
	 	  			  		  GPIO_SetBits(GPIOD, GPIO_Pin_3);
 8001bf0:	2108      	movs	r1, #8
 8001bf2:	4889      	ldr	r0, [pc, #548]	; (8001e18 <main+0x5b4>)
 8001bf4:	f7fe fdd8 	bl	80007a8 <GPIO_SetBits>
	 	  			  		  GPIO_SetBits(GPIOE, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_3 |GPIO_Pin_4 | GPIO_Pin_5);
 8001bf8:	213b      	movs	r1, #59	; 0x3b
 8001bfa:	4888      	ldr	r0, [pc, #544]	; (8001e1c <main+0x5b8>)
 8001bfc:	f7fe fdd4 	bl	80007a8 <GPIO_SetBits>
	 	  			  		  GPIO_ResetBits(GPIOE, GPIO_Pin_2 | GPIO_Pin_6);
 8001c00:	2144      	movs	r1, #68	; 0x44
 8001c02:	4886      	ldr	r0, [pc, #536]	; (8001e1c <main+0x5b8>)
 8001c04:	f7fe fddf 	bl	80007c6 <GPIO_ResetBits>
	 	  			  		  delay(16800);
 8001c08:	f244 10a0 	movw	r0, #16800	; 0x41a0
 8001c0c:	f7ff fb7c 	bl	8001308 <delay>
	 	  			  		GPIO_ResetBits(GPIOD, GPIO_Pin_3);
 8001c10:	2108      	movs	r1, #8
 8001c12:	4881      	ldr	r0, [pc, #516]	; (8001e18 <main+0x5b4>)
 8001c14:	f7fe fdd7 	bl	80007c6 <GPIO_ResetBits>



	 	  		  break;
 8001c18:	e055      	b.n	8001cc6 <main+0x462>
	 	  	  }
	 	  	  case 3:
	 	  	  {
	 	  		  GPIO_SetBits(GPIOD, GPIO_Pin_0);
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	487e      	ldr	r0, [pc, #504]	; (8001e18 <main+0x5b4>)
 8001c1e:	f7fe fdc3 	bl	80007a8 <GPIO_SetBits>
	 	  		  GPIO_SetBits(GPIOE, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 |GPIO_Pin_3 | GPIO_Pin_5);
 8001c22:	212f      	movs	r1, #47	; 0x2f
 8001c24:	487d      	ldr	r0, [pc, #500]	; (8001e1c <main+0x5b8>)
 8001c26:	f7fe fdbf 	bl	80007a8 <GPIO_SetBits>
	 	  		  GPIO_ResetBits(GPIOE, GPIO_Pin_4 | GPIO_Pin_6);
 8001c2a:	2150      	movs	r1, #80	; 0x50
 8001c2c:	487b      	ldr	r0, [pc, #492]	; (8001e1c <main+0x5b8>)
 8001c2e:	f7fe fdca 	bl	80007c6 <GPIO_ResetBits>
	 	  		  delay(16800);
 8001c32:	f244 10a0 	movw	r0, #16800	; 0x41a0
 8001c36:	f7ff fb67 	bl	8001308 <delay>
	 	  		GPIO_ResetBits(GPIOD, GPIO_Pin_0);
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	4876      	ldr	r0, [pc, #472]	; (8001e18 <main+0x5b4>)
 8001c3e:	f7fe fdc2 	bl	80007c6 <GPIO_ResetBits>
	 	  		  GPIO_SetBits(GPIOD, GPIO_Pin_1);
 8001c42:	2102      	movs	r1, #2
 8001c44:	4874      	ldr	r0, [pc, #464]	; (8001e18 <main+0x5b4>)
 8001c46:	f7fe fdaf 	bl	80007a8 <GPIO_SetBits>
	 	  		GPIO_SetBits(GPIOE, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 |GPIO_Pin_3 | GPIO_Pin_5);
 8001c4a:	212f      	movs	r1, #47	; 0x2f
 8001c4c:	4873      	ldr	r0, [pc, #460]	; (8001e1c <main+0x5b8>)
 8001c4e:	f7fe fdab 	bl	80007a8 <GPIO_SetBits>
	 	  		GPIO_ResetBits(GPIOE, GPIO_Pin_4 | GPIO_Pin_6);
 8001c52:	2150      	movs	r1, #80	; 0x50
 8001c54:	4871      	ldr	r0, [pc, #452]	; (8001e1c <main+0x5b8>)
 8001c56:	f7fe fdb6 	bl	80007c6 <GPIO_ResetBits>
	 	  		  delay(16800);
 8001c5a:	f244 10a0 	movw	r0, #16800	; 0x41a0
 8001c5e:	f7ff fb53 	bl	8001308 <delay>
	 	  		GPIO_ResetBits(GPIOD, GPIO_Pin_1);
 8001c62:	2102      	movs	r1, #2
 8001c64:	486c      	ldr	r0, [pc, #432]	; (8001e18 <main+0x5b4>)
 8001c66:	f7fe fdae 	bl	80007c6 <GPIO_ResetBits>
	 	  		  GPIO_SetBits(GPIOD, GPIO_Pin_2);
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	486a      	ldr	r0, [pc, #424]	; (8001e18 <main+0x5b4>)
 8001c6e:	f7fe fd9b 	bl	80007a8 <GPIO_SetBits>
	 	  		GPIO_SetBits(GPIOE, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 |GPIO_Pin_3 | GPIO_Pin_5);
 8001c72:	212f      	movs	r1, #47	; 0x2f
 8001c74:	4869      	ldr	r0, [pc, #420]	; (8001e1c <main+0x5b8>)
 8001c76:	f7fe fd97 	bl	80007a8 <GPIO_SetBits>
	 	  		GPIO_ResetBits(GPIOE, GPIO_Pin_4 | GPIO_Pin_6);
 8001c7a:	2150      	movs	r1, #80	; 0x50
 8001c7c:	4867      	ldr	r0, [pc, #412]	; (8001e1c <main+0x5b8>)
 8001c7e:	f7fe fda2 	bl	80007c6 <GPIO_ResetBits>
	 	  		  delay(16800);
 8001c82:	f244 10a0 	movw	r0, #16800	; 0x41a0
 8001c86:	f7ff fb3f 	bl	8001308 <delay>
	 	  		GPIO_ResetBits(GPIOD, GPIO_Pin_2);
 8001c8a:	2104      	movs	r1, #4
 8001c8c:	4862      	ldr	r0, [pc, #392]	; (8001e18 <main+0x5b4>)
 8001c8e:	f7fe fd9a 	bl	80007c6 <GPIO_ResetBits>
	 	  		  GPIO_SetBits(GPIOD, GPIO_Pin_3);
 8001c92:	2108      	movs	r1, #8
 8001c94:	4860      	ldr	r0, [pc, #384]	; (8001e18 <main+0x5b4>)
 8001c96:	f7fe fd87 	bl	80007a8 <GPIO_SetBits>
	 	  		GPIO_SetBits(GPIOE, GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 |GPIO_Pin_3 | GPIO_Pin_5);
 8001c9a:	212f      	movs	r1, #47	; 0x2f
 8001c9c:	485f      	ldr	r0, [pc, #380]	; (8001e1c <main+0x5b8>)
 8001c9e:	f7fe fd83 	bl	80007a8 <GPIO_SetBits>
	 	  		GPIO_ResetBits(GPIOE, GPIO_Pin_4 | GPIO_Pin_6);
 8001ca2:	2150      	movs	r1, #80	; 0x50
 8001ca4:	485d      	ldr	r0, [pc, #372]	; (8001e1c <main+0x5b8>)
 8001ca6:	f7fe fd8e 	bl	80007c6 <GPIO_ResetBits>
	 	  		  delay(16800);
 8001caa:	f244 10a0 	movw	r0, #16800	; 0x41a0
 8001cae:	f7ff fb2b 	bl	8001308 <delay>
	 	  		GPIO_ResetBits(GPIOD, GPIO_Pin_3);
 8001cb2:	2108      	movs	r1, #8
 8001cb4:	4858      	ldr	r0, [pc, #352]	; (8001e18 <main+0x5b4>)
 8001cb6:	f7fe fd86 	bl	80007c6 <GPIO_ResetBits>
	 	  		  break;
 8001cba:	e004      	b.n	8001cc6 <main+0x462>
	 	  	  }
	 	  	  default:
	 	  		  GPIO_ResetBits(GPIOE, GPIO_Pin_All);
 8001cbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001cc0:	4856      	ldr	r0, [pc, #344]	; (8001e1c <main+0x5b8>)
 8001cc2:	f7fe fd80 	bl	80007c6 <GPIO_ResetBits>

	 	  }

	  //**************************************
	  if(score_total <= 5){
 8001cc6:	4b56      	ldr	r3, [pc, #344]	; (8001e20 <main+0x5bc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	dc06      	bgt.n	8001cdc <main+0x478>
		  lvl=1;
 8001cce:	4b55      	ldr	r3, [pc, #340]	; (8001e24 <main+0x5c0>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
		  // Level 1
		 x  = 1.5;
 8001cd4:	4b54      	ldr	r3, [pc, #336]	; (8001e28 <main+0x5c4>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e027      	b.n	8001d2c <main+0x4c8>
	  }
	  else if(score_total <= 10 && score_total>5){
 8001cdc:	4b50      	ldr	r3, [pc, #320]	; (8001e20 <main+0x5bc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b0a      	cmp	r3, #10
 8001ce2:	dc0a      	bgt.n	8001cfa <main+0x496>
 8001ce4:	4b4e      	ldr	r3, [pc, #312]	; (8001e20 <main+0x5bc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b05      	cmp	r3, #5
 8001cea:	dd06      	ble.n	8001cfa <main+0x496>
		  lvl = 2;
 8001cec:	4b4d      	ldr	r3, [pc, #308]	; (8001e24 <main+0x5c0>)
 8001cee:	2202      	movs	r2, #2
 8001cf0:	601a      	str	r2, [r3, #0]
		  // Level 2
		  x  = 1.25;
 8001cf2:	4b4d      	ldr	r3, [pc, #308]	; (8001e28 <main+0x5c4>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	e018      	b.n	8001d2c <main+0x4c8>
	  }
	  else if(score_total <= 15 && score_total>10){
 8001cfa:	4b49      	ldr	r3, [pc, #292]	; (8001e20 <main+0x5bc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b0f      	cmp	r3, #15
 8001d00:	dc0a      	bgt.n	8001d18 <main+0x4b4>
 8001d02:	4b47      	ldr	r3, [pc, #284]	; (8001e20 <main+0x5bc>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b0a      	cmp	r3, #10
 8001d08:	dd06      	ble.n	8001d18 <main+0x4b4>
		  lvl = 3;
 8001d0a:	4b46      	ldr	r3, [pc, #280]	; (8001e24 <main+0x5c0>)
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	601a      	str	r2, [r3, #0]
		  // Level 3
		  x  = 1.00;
 8001d10:	4b45      	ldr	r3, [pc, #276]	; (8001e28 <main+0x5c4>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	e009      	b.n	8001d2c <main+0x4c8>
	  }
	  else if (score_total>15){
 8001d18:	4b41      	ldr	r3, [pc, #260]	; (8001e20 <main+0x5bc>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b0f      	cmp	r3, #15
 8001d1e:	dd05      	ble.n	8001d2c <main+0x4c8>
		  lvl = 4;
 8001d20:	4b40      	ldr	r3, [pc, #256]	; (8001e24 <main+0x5c0>)
 8001d22:	2204      	movs	r2, #4
 8001d24:	601a      	str	r2, [r3, #0]
		  //Level 4
		  x = 0.75;
 8001d26:	4b40      	ldr	r3, [pc, #256]	; (8001e28 <main+0x5c4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
	  }
	  //****************************************
	  switch(hile_counter){
 8001d2c:	4b3f      	ldr	r3, [pc, #252]	; (8001e2c <main+0x5c8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d823      	bhi.n	8001d7e <main+0x51a>
 8001d36:	a201      	add	r2, pc, #4	; (adr r2, 8001d3c <main+0x4d8>)
 8001d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3c:	08001d51 	.word	0x08001d51
 8001d40:	08001d59 	.word	0x08001d59
 8001d44:	08001d61 	.word	0x08001d61
 8001d48:	08001d69 	.word	0x08001d69
 8001d4c:	08001d71 	.word	0x08001d71
	    case 1:
	    	h=1;
 8001d50:	4b37      	ldr	r3, [pc, #220]	; (8001e30 <main+0x5cc>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
	    break;
 8001d56:	e018      	b.n	8001d8a <main+0x526>
	    case 2:
	    	h=2;
 8001d58:	4b35      	ldr	r3, [pc, #212]	; (8001e30 <main+0x5cc>)
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	601a      	str	r2, [r3, #0]
	    break;
 8001d5e:	e014      	b.n	8001d8a <main+0x526>
	    case 3:
	    	h=3;
 8001d60:	4b33      	ldr	r3, [pc, #204]	; (8001e30 <main+0x5cc>)
 8001d62:	2203      	movs	r2, #3
 8001d64:	601a      	str	r2, [r3, #0]
	    break;
 8001d66:	e010      	b.n	8001d8a <main+0x526>
	    case 4:
	    	h=2;
 8001d68:	4b31      	ldr	r3, [pc, #196]	; (8001e30 <main+0x5cc>)
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	601a      	str	r2, [r3, #0]
	    break;
 8001d6e:	e00c      	b.n	8001d8a <main+0x526>
	    case 5:
	    	h=1;
 8001d70:	4b2f      	ldr	r3, [pc, #188]	; (8001e30 <main+0x5cc>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
	    	time_counter=0;
 8001d76:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <main+0x5d0>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
	    break;
 8001d7c:	e005      	b.n	8001d8a <main+0x526>
	    default:
	    hile_counter = 1;
 8001d7e:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <main+0x5c8>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
	    time_counter=0;
 8001d84:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <main+0x5d0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
	  }

	  if(h==2 | h==3){
 8001d8a:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <main+0x5cc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	bf0c      	ite	eq
 8001d92:	2301      	moveq	r3, #1
 8001d94:	2300      	movne	r3, #0
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <main+0x5cc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	bf0c      	ite	eq
 8001da0:	2301      	moveq	r3, #1
 8001da2:	2300      	movne	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	4313      	orrs	r3, r2
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d004      	beq.n	8001db8 <main+0x554>
    	 time_counter++;
 8001dae:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <main+0x5d0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	3301      	adds	r3, #1
 8001db4:	4a1f      	ldr	r2, [pc, #124]	; (8001e34 <main+0x5d0>)
 8001db6:	6013      	str	r3, [r2, #0]

      }

      if(time_counter >20){
 8001db8:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <main+0x5d0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b14      	cmp	r3, #20
 8001dbe:	dd05      	ble.n	8001dcc <main+0x568>
    	  hile_counter=1;
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <main+0x5c8>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]
    	  time_counter=0;
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <main+0x5d0>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]


	  //****************************************
	  //****************************************

	 score_total = score0 + score1 + score2 ;
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <main+0x5d4>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <main+0x5d8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	441a      	add	r2, r3
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <main+0x5dc>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a10      	ldr	r2, [pc, #64]	; (8001e20 <main+0x5bc>)
 8001dde:	6013      	str	r3, [r2, #0]

//**********************
	 if(score_total <= 0) {
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <main+0x5bc>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	dc02      	bgt.n	8001dee <main+0x58a>
		 score_total=0;
 8001de8:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <main+0x5bc>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
	 }


	 if(try_count <= 0){
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <main+0x5e0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	dc02      	bgt.n	8001dfc <main+0x598>
		 try_count=0;
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <main+0x5e0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
		 }


// ***** score -> LCD *****
	  if(score_total >= 10){
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <main+0x5bc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b09      	cmp	r3, #9
 8001e02:	dd21      	ble.n	8001e48 <main+0x5e4>
		  lcd_send_cmd(0xC0);
 8001e04:	20c0      	movs	r0, #192	; 0xc0
 8001e06:	f7ff f9df 	bl	80011c8 <lcd_send_cmd>
		  lcd_send_int(score_total);
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <main+0x5bc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fb82 	bl	8001518 <lcd_send_int>
 8001e14:	e026      	b.n	8001e64 <main+0x600>
 8001e16:	bf00      	nop
 8001e18:	40020c00 	.word	0x40020c00
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	2000007c 	.word	0x2000007c
 8001e24:	2000002c 	.word	0x2000002c
 8001e28:	20000024 	.word	0x20000024
 8001e2c:	20000034 	.word	0x20000034
 8001e30:	20000038 	.word	0x20000038
 8001e34:	20000080 	.word	0x20000080
 8001e38:	20000070 	.word	0x20000070
 8001e3c:	20000074 	.word	0x20000074
 8001e40:	20000078 	.word	0x20000078
 8001e44:	20000030 	.word	0x20000030
	  }
	  else  {
		  lcd_send_cmd(0xC0);
 8001e48:	20c0      	movs	r0, #192	; 0xc0
 8001e4a:	f7ff f9bd 	bl	80011c8 <lcd_send_cmd>
		  lcd_sende_string("0");
 8001e4e:	4835      	ldr	r0, [pc, #212]	; (8001f24 <main+0x6c0>)
 8001e50:	f7ff fa46 	bl	80012e0 <lcd_sende_string>
		  lcd_send_cmd(0xC1);
 8001e54:	20c1      	movs	r0, #193	; 0xc1
 8001e56:	f7ff f9b7 	bl	80011c8 <lcd_send_cmd>
		  lcd_send_int(score_total);
 8001e5a:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <main+0x6c4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fb5a 	bl	8001518 <lcd_send_int>
	  }

// ***** LVL -> LCD *****
	  lcd_send_cmd(0xCE);
 8001e64:	20ce      	movs	r0, #206	; 0xce
 8001e66:	f7ff f9af 	bl	80011c8 <lcd_send_cmd>
	  lcd_send_int(lvl);
 8001e6a:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <main+0x6c8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fb52 	bl	8001518 <lcd_send_int>

// ***** try_count
	  switch(try_count){
 8001e74:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <main+0x6cc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	f63f ad1f 	bhi.w	80018bc <main+0x58>
 8001e7e:	a201      	add	r2, pc, #4	; (adr r2, 8001e84 <main+0x620>)
 8001e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e84:	08001f07 	.word	0x08001f07
 8001e88:	08001ee1 	.word	0x08001ee1
 8001e8c:	08001ebb 	.word	0x08001ebb
 8001e90:	08001e95 	.word	0x08001e95
	  case (3) :
	  	lcd_send_cmd(0x86);
 8001e94:	2086      	movs	r0, #134	; 0x86
 8001e96:	f7ff f997 	bl	80011c8 <lcd_send_cmd>
	  	lcd_send_data(0);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7ff f9da 	bl	8001254 <lcd_send_data>
	  	lcd_send_cmd(0x87);
 8001ea0:	2087      	movs	r0, #135	; 0x87
 8001ea2:	f7ff f991 	bl	80011c8 <lcd_send_cmd>
	  	lcd_send_data(0);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7ff f9d4 	bl	8001254 <lcd_send_data>
	  	lcd_send_cmd(0x88);
 8001eac:	2088      	movs	r0, #136	; 0x88
 8001eae:	f7ff f98b 	bl	80011c8 <lcd_send_cmd>
	  	lcd_send_data(0);
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7ff f9ce 	bl	8001254 <lcd_send_data>
	  	break;
 8001eb8:	e032      	b.n	8001f20 <main+0x6bc>

	  case (2) :
		lcd_send_cmd(0x86);
 8001eba:	2086      	movs	r0, #134	; 0x86
 8001ebc:	f7ff f984 	bl	80011c8 <lcd_send_cmd>
		lcd_send_data(0);
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f7ff f9c7 	bl	8001254 <lcd_send_data>
		lcd_send_cmd(0x87);
 8001ec6:	2087      	movs	r0, #135	; 0x87
 8001ec8:	f7ff f97e 	bl	80011c8 <lcd_send_cmd>
		lcd_send_data(0);
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f7ff f9c1 	bl	8001254 <lcd_send_data>
		lcd_send_cmd(0x88);
 8001ed2:	2088      	movs	r0, #136	; 0x88
 8001ed4:	f7ff f978 	bl	80011c8 <lcd_send_cmd>
		lcd_sende_string(" ");
 8001ed8:	4816      	ldr	r0, [pc, #88]	; (8001f34 <main+0x6d0>)
 8001eda:	f7ff fa01 	bl	80012e0 <lcd_sende_string>
		break;
 8001ede:	e01f      	b.n	8001f20 <main+0x6bc>

	  case (1) :
		lcd_send_cmd(0x86);
 8001ee0:	2086      	movs	r0, #134	; 0x86
 8001ee2:	f7ff f971 	bl	80011c8 <lcd_send_cmd>
		lcd_send_data(0);
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff f9b4 	bl	8001254 <lcd_send_data>
		lcd_send_cmd(0x87);
 8001eec:	2087      	movs	r0, #135	; 0x87
 8001eee:	f7ff f96b 	bl	80011c8 <lcd_send_cmd>
		lcd_sende_string(" ");
 8001ef2:	4810      	ldr	r0, [pc, #64]	; (8001f34 <main+0x6d0>)
 8001ef4:	f7ff f9f4 	bl	80012e0 <lcd_sende_string>
		lcd_send_cmd(0x88);
 8001ef8:	2088      	movs	r0, #136	; 0x88
 8001efa:	f7ff f965 	bl	80011c8 <lcd_send_cmd>
		lcd_sende_string(" ");
 8001efe:	480d      	ldr	r0, [pc, #52]	; (8001f34 <main+0x6d0>)
 8001f00:	f7ff f9ee 	bl	80012e0 <lcd_sende_string>
		break;
 8001f04:	e00c      	b.n	8001f20 <main+0x6bc>

	  case (0) :
		lcd_send_cmd(0x85);
 8001f06:	2085      	movs	r0, #133	; 0x85
 8001f08:	f7ff f95e 	bl	80011c8 <lcd_send_cmd>
		lcd_sende_string("GAME");
 8001f0c:	480a      	ldr	r0, [pc, #40]	; (8001f38 <main+0x6d4>)
 8001f0e:	f7ff f9e7 	bl	80012e0 <lcd_sende_string>
		lcd_send_cmd(0xC5);
 8001f12:	20c5      	movs	r0, #197	; 0xc5
 8001f14:	f7ff f958 	bl	80011c8 <lcd_send_cmd>
		lcd_sende_string(" OVER");
 8001f18:	4808      	ldr	r0, [pc, #32]	; (8001f3c <main+0x6d8>)
 8001f1a:	f7ff f9e1 	bl	80012e0 <lcd_sende_string>
		break;
 8001f1e:	bf00      	nop
	  random1 = RNG_GetRandomNumber();
 8001f20:	e4cc      	b.n	80018bc <main+0x58>
 8001f22:	bf00      	nop
 8001f24:	08002a88 	.word	0x08002a88
 8001f28:	2000007c 	.word	0x2000007c
 8001f2c:	2000002c 	.word	0x2000002c
 8001f30:	20000030 	.word	0x20000030
 8001f34:	08002a8c 	.word	0x08002a8c
 8001f38:	08002a90 	.word	0x08002a90
 8001f3c:	08002a98 	.word	0x08002a98

08001f40 <greeting>:
		  ;
	  }
  }
}

void greeting() {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
	// straight flow
	for(int i=0; i<10 ; i++){
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	e0b4      	b.n	80020b6 <greeting+0x176>
		if(i==0){
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d115      	bne.n	8001f7e <greeting+0x3e>
			lcd_send_cmd(0x80 + i);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	3b80      	subs	r3, #128	; 0x80
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f934 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(1);
 8001f60:	2001      	movs	r0, #1
 8001f62:	f7ff f977 	bl	8001254 <lcd_send_data>
			lcd_send_cmd(0x8F - i);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	f06f 0370 	mvn.w	r3, #112	; 0x70
 8001f6e:	1a9b      	subs	r3, r3, r2
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff f928 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(1);
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f7ff f96b 	bl	8001254 <lcd_send_data>
		}
		if(i<10 &&  0 < i){
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b09      	cmp	r3, #9
 8001f82:	dc2e      	bgt.n	8001fe2 <greeting+0xa2>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	dd2b      	ble.n	8001fe2 <greeting+0xa2>
			lcd_send_cmd(0x80 + i);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	3b80      	subs	r3, #128	; 0x80
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff f918 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(1);
 8001f98:	2001      	movs	r0, #1
 8001f9a:	f7ff f95b 	bl	8001254 <lcd_send_data>
			lcd_send_cmd(0x8F - i);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	f06f 0370 	mvn.w	r3, #112	; 0x70
 8001fa6:	1a9b      	subs	r3, r3, r2
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f90c 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(1);
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	f7ff f94f 	bl	8001254 <lcd_send_data>
			// bottom line
			lcd_send_cmd(0xC0 + (i-1));
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	3b41      	subs	r3, #65	; 0x41
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff f902 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(1);
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	f7ff f945 	bl	8001254 <lcd_send_data>
			lcd_send_cmd(0xCF - (i-1));
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	f06f 032f 	mvn.w	r3, #47	; 0x2f
 8001fd2:	1a9b      	subs	r3, r3, r2
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff f8f6 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(1);
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f7ff f939 	bl	8001254 <lcd_send_data>
		}
		if(i>2 && i < 11){
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	dd47      	ble.n	8002078 <greeting+0x138>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b0a      	cmp	r3, #10
 8001fec:	dc44      	bgt.n	8002078 <greeting+0x138>
			lcd_send_cmd(0x80 +(i-3));
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	337d      	adds	r3, #125	; 0x7d
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff f8e6 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string(" ");
 8001ffc:	48b3      	ldr	r0, [pc, #716]	; (80022cc <greeting+0x38c>)
 8001ffe:	f7ff f96f 	bl	80012e0 <lcd_sende_string>
			lcd_send_cmd(0x8F - (i-3));
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	b2db      	uxtb	r3, r3
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff f8da 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string(" ");
 8002014:	48ad      	ldr	r0, [pc, #692]	; (80022cc <greeting+0x38c>)
 8002016:	f7ff f963 	bl	80012e0 <lcd_sende_string>
			// bottom line
			if(i==10){
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b0a      	cmp	r3, #10
 800201e:	d115      	bne.n	800204c <greeting+0x10c>
				lcd_send_cmd(0xC0 + (i-1));
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	3b41      	subs	r3, #65	; 0x41
 8002026:	b2db      	uxtb	r3, r3
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff f8cd 	bl	80011c8 <lcd_send_cmd>
				lcd_send_data(1);
 800202e:	2001      	movs	r0, #1
 8002030:	f7ff f910 	bl	8001254 <lcd_send_data>
				lcd_send_cmd(0xCF - (i-1));
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	f06f 032f 	mvn.w	r3, #47	; 0x2f
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	b2db      	uxtb	r3, r3
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff f8c1 	bl	80011c8 <lcd_send_cmd>
				lcd_send_data(1);
 8002046:	2001      	movs	r0, #1
 8002048:	f7ff f904 	bl	8001254 <lcd_send_data>
			}
			lcd_send_cmd(0xC0 +(i-4));
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	3b44      	subs	r3, #68	; 0x44
 8002052:	b2db      	uxtb	r3, r3
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff f8b7 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string(" ");
 800205a:	489c      	ldr	r0, [pc, #624]	; (80022cc <greeting+0x38c>)
 800205c:	f7ff f940 	bl	80012e0 <lcd_sende_string>
			lcd_send_cmd(0xCF - (i-4));
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	b2da      	uxtb	r2, r3
 8002064:	f06f 032c 	mvn.w	r3, #44	; 0x2c
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	b2db      	uxtb	r3, r3
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff f8ab 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string(" ");
 8002072:	4896      	ldr	r0, [pc, #600]	; (80022cc <greeting+0x38c>)
 8002074:	f7ff f934 	bl	80012e0 <lcd_sende_string>
		}
		if(i==11){
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b0b      	cmp	r3, #11
 800207c:	d115      	bne.n	80020aa <greeting+0x16a>
			lcd_send_cmd(0xC0 +(i-4));
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	3b44      	subs	r3, #68	; 0x44
 8002084:	b2db      	uxtb	r3, r3
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff f89e 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string(" ");
 800208c:	488f      	ldr	r0, [pc, #572]	; (80022cc <greeting+0x38c>)
 800208e:	f7ff f927 	bl	80012e0 <lcd_sende_string>
			lcd_send_cmd(0xCF - (i-4));
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	f06f 032c 	mvn.w	r3, #44	; 0x2c
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	b2db      	uxtb	r3, r3
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff f892 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string(" ");
 80020a4:	4889      	ldr	r0, [pc, #548]	; (80022cc <greeting+0x38c>)
 80020a6:	f7ff f91b 	bl	80012e0 <lcd_sende_string>
		}
		delay(2100000);
 80020aa:	4889      	ldr	r0, [pc, #548]	; (80022d0 <greeting+0x390>)
 80020ac:	f7ff f92c 	bl	8001308 <delay>
	for(int i=0; i<10 ; i++){
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3301      	adds	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b09      	cmp	r3, #9
 80020ba:	f77f af47 	ble.w	8001f4c <greeting+0xc>
	}
	// inverse flow
	for(int i=9; i<20 ; i++) {
 80020be:	2309      	movs	r3, #9
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	e0fc      	b.n	80022be <greeting+0x37e>
		if(i==9){
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b09      	cmp	r3, #9
 80020c8:	d115      	bne.n	80020f6 <greeting+0x1b6>
			lcd_send_cmd(0xC0 +(i-3));
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	3b43      	subs	r3, #67	; 0x43
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff f878 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string(" ");
 80020d8:	487c      	ldr	r0, [pc, #496]	; (80022cc <greeting+0x38c>)
 80020da:	f7ff f901 	bl	80012e0 <lcd_sende_string>
			lcd_send_cmd(0xCF - (i-3));
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff f86c 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string(" ");
 80020f0:	4876      	ldr	r0, [pc, #472]	; (80022cc <greeting+0x38c>)
 80020f2:	f7ff f8f5 	bl	80012e0 <lcd_sende_string>
		}

		if(i<16){
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b0f      	cmp	r3, #15
 80020fa:	dc2b      	bgt.n	8002154 <greeting+0x214>
			lcd_send_cmd(0x80 + i);
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	3b80      	subs	r3, #128	; 0x80
 8002102:	b2db      	uxtb	r3, r3
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff f85f 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(1);
 800210a:	2001      	movs	r0, #1
 800210c:	f7ff f8a2 	bl	8001254 <lcd_send_data>
			lcd_send_cmd(0x8F - i);
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	f06f 0370 	mvn.w	r3, #112	; 0x70
 8002118:	1a9b      	subs	r3, r3, r2
 800211a:	b2db      	uxtb	r3, r3
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff f853 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(1);
 8002122:	2001      	movs	r0, #1
 8002124:	f7ff f896 	bl	8001254 <lcd_send_data>
			// bottom line
			lcd_send_cmd(0xC0 + (i-1));
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	3b41      	subs	r3, #65	; 0x41
 800212e:	b2db      	uxtb	r3, r3
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff f849 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(1);
 8002136:	2001      	movs	r0, #1
 8002138:	f7ff f88c 	bl	8001254 <lcd_send_data>
			lcd_send_cmd(0xCF - (i-1));
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	f06f 032f 	mvn.w	r3, #47	; 0x2f
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	b2db      	uxtb	r3, r3
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff f83d 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(1);
 800214e:	2001      	movs	r0, #1
 8002150:	f7ff f880 	bl	8001254 <lcd_send_data>
		}
		if(i == 16){
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b10      	cmp	r3, #16
 8002158:	d115      	bne.n	8002186 <greeting+0x246>
			lcd_send_cmd(0xC0 + (i-1));
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	3b41      	subs	r3, #65	; 0x41
 8002160:	b2db      	uxtb	r3, r3
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff f830 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(1);
 8002168:	2001      	movs	r0, #1
 800216a:	f7ff f873 	bl	8001254 <lcd_send_data>
			lcd_send_cmd(0xCF - (i-1));
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	f06f 032f 	mvn.w	r3, #47	; 0x2f
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	b2db      	uxtb	r3, r3
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff f824 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(1);
 8002180:	2001      	movs	r0, #1
 8002182:	f7ff f867 	bl	8001254 <lcd_send_data>
		}

		if(i>10 && i < 19){
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b0a      	cmp	r3, #10
 800218a:	dd2e      	ble.n	80021ea <greeting+0x2aa>
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b12      	cmp	r3, #18
 8002190:	dc2b      	bgt.n	80021ea <greeting+0x2aa>
			lcd_send_cmd(0x80 +(i-3));
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	337d      	adds	r3, #125	; 0x7d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff f814 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string(" ");
 80021a0:	484a      	ldr	r0, [pc, #296]	; (80022cc <greeting+0x38c>)
 80021a2:	f7ff f89d 	bl	80012e0 <lcd_sende_string>
			lcd_send_cmd(0x8F - (i-3));
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff f808 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string(" ");
 80021b8:	4844      	ldr	r0, [pc, #272]	; (80022cc <greeting+0x38c>)
 80021ba:	f7ff f891 	bl	80012e0 <lcd_sende_string>
			// bottom line
			lcd_send_cmd(0xC0 + (i-4));
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	3b44      	subs	r3, #68	; 0x44
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fffe 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string(" ");
 80021cc:	483f      	ldr	r0, [pc, #252]	; (80022cc <greeting+0x38c>)
 80021ce:	f7ff f887 	bl	80012e0 <lcd_sende_string>
			lcd_send_cmd(0xCF - (i-4));
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	f06f 032c 	mvn.w	r3, #44	; 0x2c
 80021da:	1a9b      	subs	r3, r3, r2
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fff2 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string(" ");
 80021e4:	4839      	ldr	r0, [pc, #228]	; (80022cc <greeting+0x38c>)
 80021e6:	f7ff f87b 	bl	80012e0 <lcd_sende_string>
		}

		if(i == 19){
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b13      	cmp	r3, #19
 80021ee:	d115      	bne.n	800221c <greeting+0x2dc>
			lcd_send_cmd(0xC0 + (i-4));
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	3b44      	subs	r3, #68	; 0x44
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe ffe5 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string(" ");
 80021fe:	4833      	ldr	r0, [pc, #204]	; (80022cc <greeting+0x38c>)
 8002200:	f7ff f86e 	bl	80012e0 <lcd_sende_string>
			lcd_send_cmd(0xCF - (i-4));
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	f06f 032c 	mvn.w	r3, #44	; 0x2c
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	b2db      	uxtb	r3, r3
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe ffd9 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string(" ");
 8002216:	482d      	ldr	r0, [pc, #180]	; (80022cc <greeting+0x38c>)
 8002218:	f7ff f862 	bl	80012e0 <lcd_sende_string>
		}

		if(i == 11){
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b0b      	cmp	r3, #11
 8002220:	d10b      	bne.n	800223a <greeting+0x2fa>
			lcd_send_cmd(0x88);
 8002222:	2088      	movs	r0, #136	; 0x88
 8002224:	f7fe ffd0 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string("A");
 8002228:	482a      	ldr	r0, [pc, #168]	; (80022d4 <greeting+0x394>)
 800222a:	f7ff f859 	bl	80012e0 <lcd_sende_string>
			lcd_send_cmd(0x87);
 800222e:	2087      	movs	r0, #135	; 0x87
 8002230:	f7fe ffca 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string("H");
 8002234:	4828      	ldr	r0, [pc, #160]	; (80022d8 <greeting+0x398>)
 8002236:	f7ff f853 	bl	80012e0 <lcd_sende_string>
		}

		if(i == 12){
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b0c      	cmp	r3, #12
 800223e:	d117      	bne.n	8002270 <greeting+0x330>
			lcd_send_cmd(0x89);
 8002240:	2089      	movs	r0, #137	; 0x89
 8002242:	f7fe ffc1 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string("C");
 8002246:	4825      	ldr	r0, [pc, #148]	; (80022dc <greeting+0x39c>)
 8002248:	f7ff f84a 	bl	80012e0 <lcd_sende_string>
			lcd_send_cmd(0x86);
 800224c:	2086      	movs	r0, #134	; 0x86
 800224e:	f7fe ffbb 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string("W");
 8002252:	4823      	ldr	r0, [pc, #140]	; (80022e0 <greeting+0x3a0>)
 8002254:	f7ff f844 	bl	80012e0 <lcd_sende_string>
			//bottom line
			lcd_send_cmd(0xC8);
 8002258:	20c8      	movs	r0, #200	; 0xc8
 800225a:	f7fe ffb5 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string("O");
 800225e:	4821      	ldr	r0, [pc, #132]	; (80022e4 <greeting+0x3a4>)
 8002260:	f7ff f83e 	bl	80012e0 <lcd_sende_string>
			lcd_send_cmd(0xC7);
 8002264:	20c7      	movs	r0, #199	; 0xc7
 8002266:	f7fe ffaf 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string("M");
 800226a:	481f      	ldr	r0, [pc, #124]	; (80022e8 <greeting+0x3a8>)
 800226c:	f7ff f838 	bl	80012e0 <lcd_sende_string>
		}

		if(i == 13){
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b0d      	cmp	r3, #13
 8002274:	d10b      	bne.n	800228e <greeting+0x34e>
			lcd_send_cmd(0xC9);
 8002276:	20c9      	movs	r0, #201	; 0xc9
 8002278:	f7fe ffa6 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string("L");
 800227c:	481b      	ldr	r0, [pc, #108]	; (80022ec <greeting+0x3ac>)
 800227e:	f7ff f82f 	bl	80012e0 <lcd_sende_string>
			lcd_send_cmd(0xC6);
 8002282:	20c6      	movs	r0, #198	; 0xc6
 8002284:	f7fe ffa0 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string(" ");
 8002288:	4810      	ldr	r0, [pc, #64]	; (80022cc <greeting+0x38c>)
 800228a:	f7ff f829 	bl	80012e0 <lcd_sende_string>
		}

		if(i == 14){
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b0e      	cmp	r3, #14
 8002292:	d10b      	bne.n	80022ac <greeting+0x36c>
			lcd_send_cmd(0xCA);
 8002294:	20ca      	movs	r0, #202	; 0xca
 8002296:	f7fe ff97 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string("E");
 800229a:	4815      	ldr	r0, [pc, #84]	; (80022f0 <greeting+0x3b0>)
 800229c:	f7ff f820 	bl	80012e0 <lcd_sende_string>
			lcd_send_cmd(0xC5);
 80022a0:	20c5      	movs	r0, #197	; 0xc5
 80022a2:	f7fe ff91 	bl	80011c8 <lcd_send_cmd>
			lcd_sende_string("A");
 80022a6:	480b      	ldr	r0, [pc, #44]	; (80022d4 <greeting+0x394>)
 80022a8:	f7ff f81a 	bl	80012e0 <lcd_sende_string>
		}

		if (!(i == 11)) delay(2100000);
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b0b      	cmp	r3, #11
 80022b0:	d002      	beq.n	80022b8 <greeting+0x378>
 80022b2:	4807      	ldr	r0, [pc, #28]	; (80022d0 <greeting+0x390>)
 80022b4:	f7ff f828 	bl	8001308 <delay>
	for(int i=9; i<20 ; i++) {
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	3301      	adds	r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b13      	cmp	r3, #19
 80022c2:	f77f aeff 	ble.w	80020c4 <greeting+0x184>
	}
	// blink
	for(int i= 0; i < 3; i++){
 80022c6:	2300      	movs	r3, #0
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	e02b      	b.n	8002324 <greeting+0x3e4>
 80022cc:	08002a8c 	.word	0x08002a8c
 80022d0:	00200b20 	.word	0x00200b20
 80022d4:	08002aa0 	.word	0x08002aa0
 80022d8:	08002aa4 	.word	0x08002aa4
 80022dc:	08002aa8 	.word	0x08002aa8
 80022e0:	08002aac 	.word	0x08002aac
 80022e4:	08002ab0 	.word	0x08002ab0
 80022e8:	08002ab4 	.word	0x08002ab4
 80022ec:	08002ab8 	.word	0x08002ab8
 80022f0:	08002abc 	.word	0x08002abc
	lcd_send_cmd(0x86);
 80022f4:	2086      	movs	r0, #134	; 0x86
 80022f6:	f7fe ff67 	bl	80011c8 <lcd_send_cmd>
	lcd_sende_string("WHAC");
 80022fa:	480e      	ldr	r0, [pc, #56]	; (8002334 <greeting+0x3f4>)
 80022fc:	f7fe fff0 	bl	80012e0 <lcd_sende_string>
	lcd_send_cmd(0xC5);
 8002300:	20c5      	movs	r0, #197	; 0xc5
 8002302:	f7fe ff61 	bl	80011c8 <lcd_send_cmd>
	lcd_sende_string("A MOLE");
 8002306:	480c      	ldr	r0, [pc, #48]	; (8002338 <greeting+0x3f8>)
 8002308:	f7fe ffea 	bl	80012e0 <lcd_sende_string>
	delay(3000000);
 800230c:	480b      	ldr	r0, [pc, #44]	; (800233c <greeting+0x3fc>)
 800230e:	f7fe fffb 	bl	8001308 <delay>
	lcd_send_cmd(0x01);
 8002312:	2001      	movs	r0, #1
 8002314:	f7fe ff58 	bl	80011c8 <lcd_send_cmd>
	delay(3000000);
 8002318:	4808      	ldr	r0, [pc, #32]	; (800233c <greeting+0x3fc>)
 800231a:	f7fe fff5 	bl	8001308 <delay>
	for(int i= 0; i < 3; i++){
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3301      	adds	r3, #1
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b02      	cmp	r3, #2
 8002328:	dde4      	ble.n	80022f4 <greeting+0x3b4>
	}
}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	08002ac0 	.word	0x08002ac0
 8002338:	08002ac8 	.word	0x08002ac8
 800233c:	002dc6c0 	.word	0x002dc6c0

08002340 <showLED>:

void showLED(int i) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

	switch(i){
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b07      	cmp	r3, #7
 800234c:	f200 813e 	bhi.w	80025cc <showLED+0x28c>
 8002350:	a201      	add	r2, pc, #4	; (adr r2, 8002358 <showLED+0x18>)
 8002352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002356:	bf00      	nop
 8002358:	08002379 	.word	0x08002379
 800235c:	080023a5 	.word	0x080023a5
 8002360:	080023f9 	.word	0x080023f9
 8002364:	0800244d 	.word	0x0800244d
 8002368:	080024a1 	.word	0x080024a1
 800236c:	080024f5 	.word	0x080024f5
 8002370:	08002549 	.word	0x08002549
 8002374:	0800259d 	.word	0x0800259d
	case(0):
		for(int k = 0; k<3 ; k++){
 8002378:	2300      	movs	r3, #0
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
 800237c:	e00e      	b.n	800239c <showLED+0x5c>
		lcd_send_cmd(0xC5 + 2*k);
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	b2db      	uxtb	r3, r3
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	b2db      	uxtb	r3, r3
 8002386:	3b3b      	subs	r3, #59	; 0x3b
 8002388:	b2db      	uxtb	r3, r3
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe ff1c 	bl	80011c8 <lcd_send_cmd>
		lcd_send_data(2);
 8002390:	2002      	movs	r0, #2
 8002392:	f7fe ff5f 	bl	8001254 <lcd_send_data>
		for(int k = 0; k<3 ; k++){
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	3301      	adds	r3, #1
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	2b02      	cmp	r3, #2
 80023a0:	dded      	ble.n	800237e <showLED+0x3e>
		}
	break;
 80023a2:	e113      	b.n	80025cc <showLED+0x28c>

	case (1):
		for(int k = 0; k<3 ; k++){
 80023a4:	2300      	movs	r3, #0
 80023a6:	623b      	str	r3, [r7, #32]
 80023a8:	e022      	b.n	80023f0 <showLED+0xb0>
			if(k!=0){
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00e      	beq.n	80023ce <showLED+0x8e>
			lcd_send_cmd(0xC9 - 2*k);
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	f06f 0336 	mvn.w	r3, #54	; 0x36
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe ff01 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(2); 				// OFF LED
 80023c6:	2002      	movs	r0, #2
 80023c8:	f7fe ff44 	bl	8001254 <lcd_send_data>
 80023cc:	e00d      	b.n	80023ea <showLED+0xaa>
			}
			else{
			lcd_send_cmd(0xC9 - 2*k);
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	f06f 0336 	mvn.w	r3, #54	; 0x36
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe fef2 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(3);				// ON LED
 80023e4:	2003      	movs	r0, #3
 80023e6:	f7fe ff35 	bl	8001254 <lcd_send_data>
		for(int k = 0; k<3 ; k++){
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	3301      	adds	r3, #1
 80023ee:	623b      	str	r3, [r7, #32]
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	ddd9      	ble.n	80023aa <showLED+0x6a>
			}
		}
		break;
 80023f6:	e0e9      	b.n	80025cc <showLED+0x28c>

	case (2):
		for(int k = 0; k<3 ; k++){
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
 80023fc:	e022      	b.n	8002444 <showLED+0x104>
			if(k!=1){
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d00e      	beq.n	8002422 <showLED+0xe2>
			lcd_send_cmd(0xC9 - 2*k);
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	b2da      	uxtb	r2, r3
 800240c:	f06f 0336 	mvn.w	r3, #54	; 0x36
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	b2db      	uxtb	r3, r3
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe fed7 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(2);
 800241a:	2002      	movs	r0, #2
 800241c:	f7fe ff1a 	bl	8001254 <lcd_send_data>
 8002420:	e00d      	b.n	800243e <showLED+0xfe>
			}
			else{
			lcd_send_cmd(0xC9 - 2*k);
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	b2da      	uxtb	r2, r3
 800242a:	f06f 0336 	mvn.w	r3, #54	; 0x36
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	b2db      	uxtb	r3, r3
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fec8 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(3);
 8002438:	2003      	movs	r0, #3
 800243a:	f7fe ff0b 	bl	8001254 <lcd_send_data>
		for(int k = 0; k<3 ; k++){
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3301      	adds	r3, #1
 8002442:	61fb      	str	r3, [r7, #28]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	2b02      	cmp	r3, #2
 8002448:	ddd9      	ble.n	80023fe <showLED+0xbe>
			}
		}
		break;
 800244a:	e0bf      	b.n	80025cc <showLED+0x28c>

	case (3):
		for(int k = 0; k<3 ; k++){
 800244c:	2300      	movs	r3, #0
 800244e:	61bb      	str	r3, [r7, #24]
 8002450:	e022      	b.n	8002498 <showLED+0x158>
			if(k == 2){
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d10e      	bne.n	8002476 <showLED+0x136>
			lcd_send_cmd(0xC9 - 2*k);
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	b2da      	uxtb	r2, r3
 8002460:	f06f 0336 	mvn.w	r3, #54	; 0x36
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	b2db      	uxtb	r3, r3
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe fead 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(2);
 800246e:	2002      	movs	r0, #2
 8002470:	f7fe fef0 	bl	8001254 <lcd_send_data>
 8002474:	e00d      	b.n	8002492 <showLED+0x152>
			}
			else{
			lcd_send_cmd(0xC9 - 2*k);
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	b2da      	uxtb	r2, r3
 800247e:	f06f 0336 	mvn.w	r3, #54	; 0x36
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	b2db      	uxtb	r3, r3
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe fe9e 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(3);
 800248c:	2003      	movs	r0, #3
 800248e:	f7fe fee1 	bl	8001254 <lcd_send_data>
		for(int k = 0; k<3 ; k++){
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	3301      	adds	r3, #1
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2b02      	cmp	r3, #2
 800249c:	ddd9      	ble.n	8002452 <showLED+0x112>
			}
		}
		break;
 800249e:	e095      	b.n	80025cc <showLED+0x28c>

	case (4):
			for(int k = 0; k<3 ; k++){
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	e022      	b.n	80024ec <showLED+0x1ac>
			if(k!=2){
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d00e      	beq.n	80024ca <showLED+0x18a>
			lcd_send_cmd(0xC9 - 2*k);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	f06f 0336 	mvn.w	r3, #54	; 0x36
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe fe83 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(2);
 80024c2:	2002      	movs	r0, #2
 80024c4:	f7fe fec6 	bl	8001254 <lcd_send_data>
 80024c8:	e00d      	b.n	80024e6 <showLED+0x1a6>
			}
			else{
			lcd_send_cmd(0xC9 - 2*k);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	f06f 0336 	mvn.w	r3, #54	; 0x36
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fe74 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(3);
 80024e0:	2003      	movs	r0, #3
 80024e2:	f7fe feb7 	bl	8001254 <lcd_send_data>
			for(int k = 0; k<3 ; k++){
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	3301      	adds	r3, #1
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	ddd9      	ble.n	80024a6 <showLED+0x166>
			}
		}
		break;
 80024f2:	e06b      	b.n	80025cc <showLED+0x28c>

	case (5):
			for(int k = 0; k<3 ; k++){
 80024f4:	2300      	movs	r3, #0
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	e022      	b.n	8002540 <showLED+0x200>
			if(k == 1){
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d10e      	bne.n	800251e <showLED+0x1de>
			lcd_send_cmd(0xC9 - 2*k);
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	b2da      	uxtb	r2, r3
 8002508:	f06f 0336 	mvn.w	r3, #54	; 0x36
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	b2db      	uxtb	r3, r3
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe fe59 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(2);
 8002516:	2002      	movs	r0, #2
 8002518:	f7fe fe9c 	bl	8001254 <lcd_send_data>
 800251c:	e00d      	b.n	800253a <showLED+0x1fa>
			}
			else{
			lcd_send_cmd(0xC9 - 2*k);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	b2da      	uxtb	r2, r3
 8002526:	f06f 0336 	mvn.w	r3, #54	; 0x36
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	b2db      	uxtb	r3, r3
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fe4a 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(3);
 8002534:	2003      	movs	r0, #3
 8002536:	f7fe fe8d 	bl	8001254 <lcd_send_data>
			for(int k = 0; k<3 ; k++){
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	3301      	adds	r3, #1
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	2b02      	cmp	r3, #2
 8002544:	ddd9      	ble.n	80024fa <showLED+0x1ba>
			}
		}
		break;
 8002546:	e041      	b.n	80025cc <showLED+0x28c>

	case (6):
			for(int k = 0; k<3 ; k++){
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	e022      	b.n	8002594 <showLED+0x254>
			if(k == 0){
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10e      	bne.n	8002572 <showLED+0x232>
			lcd_send_cmd(0xC9 - 2*k);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	b2da      	uxtb	r2, r3
 800255c:	f06f 0336 	mvn.w	r3, #54	; 0x36
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fe2f 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(2);
 800256a:	2002      	movs	r0, #2
 800256c:	f7fe fe72 	bl	8001254 <lcd_send_data>
 8002570:	e00d      	b.n	800258e <showLED+0x24e>
			}
			else{
			lcd_send_cmd(0xC9 - 2*k);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	b2da      	uxtb	r2, r3
 800257a:	f06f 0336 	mvn.w	r3, #54	; 0x36
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	b2db      	uxtb	r3, r3
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fe20 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(3);
 8002588:	2003      	movs	r0, #3
 800258a:	f7fe fe63 	bl	8001254 <lcd_send_data>
			for(int k = 0; k<3 ; k++){
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	3301      	adds	r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b02      	cmp	r3, #2
 8002598:	ddd9      	ble.n	800254e <showLED+0x20e>
			}
		}
		break;
 800259a:	e017      	b.n	80025cc <showLED+0x28c>

	case (7):
			for(int k = 0; k<3 ; k++){
 800259c:	2300      	movs	r3, #0
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	e010      	b.n	80025c4 <showLED+0x284>
			lcd_send_cmd(0xC9 - 2*k);
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	f06f 0336 	mvn.w	r3, #54	; 0x36
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe fe08 	bl	80011c8 <lcd_send_cmd>
			lcd_send_data(3);
 80025b8:	2003      	movs	r0, #3
 80025ba:	f7fe fe4b 	bl	8001254 <lcd_send_data>
			for(int k = 0; k<3 ; k++){
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	3301      	adds	r3, #1
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	ddeb      	ble.n	80025a2 <showLED+0x262>
			}
		}
	}
 80025ca:	e7ff      	b.n	80025cc <showLED+0x28c>
 80025cc:	bf00      	nop
 80025ce:	3728      	adds	r7, #40	; 0x28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <EVAL_AUDIO_TransferComplete_CallBack>:


void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 80025de:	bf00      	nop
}
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <EVAL_AUDIO_GetSampleCallBack>:

uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 80025ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002634 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002600:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002602:	e003      	b.n	800260c <LoopCopyDataInit>

08002604 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002606:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002608:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800260a:	3104      	adds	r1, #4

0800260c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800260c:	480b      	ldr	r0, [pc, #44]	; (800263c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002610:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002612:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002614:	d3f6      	bcc.n	8002604 <CopyDataInit>
  ldr  r2, =_sbss
 8002616:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002618:	e002      	b.n	8002620 <LoopFillZerobss>

0800261a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800261a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800261c:	f842 3b04 	str.w	r3, [r2], #4

08002620 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002622:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002624:	d3f9      	bcc.n	800261a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002626:	f000 f841 	bl	80026ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262a:	f000 f9e7 	bl	80029fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800262e:	f7ff f919 	bl	8001864 <main>
  bx  lr    
 8002632:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002634:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002638:	08002ad8 	.word	0x08002ad8
  ldr  r0, =_sdata
 800263c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002640:	2000003c 	.word	0x2000003c
  ldr  r2, =_sbss
 8002644:	2000003c 	.word	0x2000003c
  ldr  r3, = _ebss
 8002648:	2000012c 	.word	0x2000012c

0800264c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800264c:	e7fe      	b.n	800264c <ADC_IRQHandler>

0800264e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
}
 8002652:	bf00      	nop
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002660:	e7fe      	b.n	8002660 <HardFault_Handler+0x4>

08002662 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002666:	e7fe      	b.n	8002666 <MemManage_Handler+0x4>

08002668 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800266c:	e7fe      	b.n	800266c <BusFault_Handler+0x4>

0800266e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002672:	e7fe      	b.n	8002672 <UsageFault_Handler+0x4>

08002674 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0
}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026b0:	4a16      	ldr	r2, [pc, #88]	; (800270c <SystemInit+0x60>)
 80026b2:	4b16      	ldr	r3, [pc, #88]	; (800270c <SystemInit+0x60>)
 80026b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80026c0:	4a13      	ldr	r2, [pc, #76]	; (8002710 <SystemInit+0x64>)
 80026c2:	4b13      	ldr	r3, [pc, #76]	; (8002710 <SystemInit+0x64>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026cc:	4b10      	ldr	r3, [pc, #64]	; (8002710 <SystemInit+0x64>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80026d2:	4a0f      	ldr	r2, [pc, #60]	; (8002710 <SystemInit+0x64>)
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <SystemInit+0x64>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80026dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <SystemInit+0x64>)
 80026e4:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <SystemInit+0x68>)
 80026e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80026e8:	4a09      	ldr	r2, [pc, #36]	; (8002710 <SystemInit+0x64>)
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <SystemInit+0x64>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <SystemInit+0x64>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80026fa:	f000 f80d 	bl	8002718 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026fe:	4b03      	ldr	r3, [pc, #12]	; (800270c <SystemInit+0x60>)
 8002700:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002704:	609a      	str	r2, [r3, #8]
#endif
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	e000ed00 	.word	0xe000ed00
 8002710:	40023800 	.word	0x40023800
 8002714:	24003010 	.word	0x24003010

08002718 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	2300      	movs	r3, #0
 8002724:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002726:	4a36      	ldr	r2, [pc, #216]	; (8002800 <SetSysClock+0xe8>)
 8002728:	4b35      	ldr	r3, [pc, #212]	; (8002800 <SetSysClock+0xe8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002730:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002732:	4b33      	ldr	r3, [pc, #204]	; (8002800 <SetSysClock+0xe8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3301      	adds	r3, #1
 8002740:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d103      	bne.n	8002750 <SetSysClock+0x38>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800274e:	d1f0      	bne.n	8002732 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002750:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <SetSysClock+0xe8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800275c:	2301      	movs	r3, #1
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	e001      	b.n	8002766 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002762:	2300      	movs	r3, #0
 8002764:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d142      	bne.n	80027f2 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800276c:	4a24      	ldr	r2, [pc, #144]	; (8002800 <SetSysClock+0xe8>)
 800276e:	4b24      	ldr	r3, [pc, #144]	; (8002800 <SetSysClock+0xe8>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002776:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8002778:	4a22      	ldr	r2, [pc, #136]	; (8002804 <SetSysClock+0xec>)
 800277a:	4b22      	ldr	r3, [pc, #136]	; (8002804 <SetSysClock+0xec>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002782:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002784:	4a1e      	ldr	r2, [pc, #120]	; (8002800 <SetSysClock+0xe8>)
 8002786:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <SetSysClock+0xe8>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800278c:	4a1c      	ldr	r2, [pc, #112]	; (8002800 <SetSysClock+0xe8>)
 800278e:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <SetSysClock+0xe8>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002796:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002798:	4a19      	ldr	r2, [pc, #100]	; (8002800 <SetSysClock+0xe8>)
 800279a:	4b19      	ldr	r3, [pc, #100]	; (8002800 <SetSysClock+0xe8>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80027a2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80027a4:	4b16      	ldr	r3, [pc, #88]	; (8002800 <SetSysClock+0xe8>)
 80027a6:	4a18      	ldr	r2, [pc, #96]	; (8002808 <SetSysClock+0xf0>)
 80027a8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80027aa:	4a15      	ldr	r2, [pc, #84]	; (8002800 <SetSysClock+0xe8>)
 80027ac:	4b14      	ldr	r3, [pc, #80]	; (8002800 <SetSysClock+0xe8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027b4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80027b6:	bf00      	nop
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <SetSysClock+0xe8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f9      	beq.n	80027b8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <SetSysClock+0xf4>)
 80027c6:	f240 6205 	movw	r2, #1541	; 0x605
 80027ca:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80027cc:	4a0c      	ldr	r2, [pc, #48]	; (8002800 <SetSysClock+0xe8>)
 80027ce:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <SetSysClock+0xe8>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f023 0303 	bic.w	r3, r3, #3
 80027d6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80027d8:	4a09      	ldr	r2, [pc, #36]	; (8002800 <SetSysClock+0xe8>)
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <SetSysClock+0xe8>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f043 0302 	orr.w	r3, r3, #2
 80027e2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80027e4:	bf00      	nop
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <SetSysClock+0xe8>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d1f9      	bne.n	80027e6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800
 8002804:	40007000 	.word	0x40007000
 8002808:	07405408 	.word	0x07405408
 800280c:	40023c00 	.word	0x40023c00

08002810 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
	int div = 1;
 800281c:	2301      	movs	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8002820:	e004      	b.n	800282c <ts_itoa+0x1c>
		div *= base;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	fb02 f303 	mul.w	r3, r2, r3
 800282a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	fbb2 f2f3 	udiv	r2, r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	429a      	cmp	r2, r3
 8002838:	d2f3      	bcs.n	8002822 <ts_itoa+0x12>

	while (div != 0)
 800283a:	e029      	b.n	8002890 <ts_itoa+0x80>
	{
		int num = d/div;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	613b      	str	r3, [r7, #16]
		d = d%div;
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	fbb3 f1f2 	udiv	r1, r3, r2
 800284e:	fb02 f201 	mul.w	r2, r2, r1
 8002852:	1a9b      	subs	r3, r3, r2
 8002854:	60bb      	str	r3, [r7, #8]
		div /= base;
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	fb92 f3f3 	sdiv	r3, r2, r3
 800285e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	2b09      	cmp	r3, #9
 8002864:	dd0a      	ble.n	800287c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	1c59      	adds	r1, r3, #1
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	6011      	str	r1, [r2, #0]
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	3237      	adds	r2, #55	; 0x37
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]
 800287a:	e009      	b.n	8002890 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	1c59      	adds	r1, r3, #1
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	6011      	str	r1, [r2, #0]
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	3230      	adds	r2, #48	; 0x30
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1d2      	bne.n	800283c <ts_itoa+0x2c>
	}
}
 8002896:	bf00      	nop
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b088      	sub	sp, #32
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80028b2:	e07d      	b.n	80029b0 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b25      	cmp	r3, #37	; 0x25
 80028ba:	d171      	bne.n	80029a0 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	3301      	adds	r3, #1
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d01e      	beq.n	8002908 <ts_formatstring+0x66>
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	dc06      	bgt.n	80028dc <ts_formatstring+0x3a>
 80028ce:	2b58      	cmp	r3, #88	; 0x58
 80028d0:	d050      	beq.n	8002974 <ts_formatstring+0xd2>
 80028d2:	2b63      	cmp	r3, #99	; 0x63
 80028d4:	d00e      	beq.n	80028f4 <ts_formatstring+0x52>
 80028d6:	2b25      	cmp	r3, #37	; 0x25
 80028d8:	d058      	beq.n	800298c <ts_formatstring+0xea>
 80028da:	e05d      	b.n	8002998 <ts_formatstring+0xf6>
 80028dc:	2b73      	cmp	r3, #115	; 0x73
 80028de:	d02b      	beq.n	8002938 <ts_formatstring+0x96>
 80028e0:	2b73      	cmp	r3, #115	; 0x73
 80028e2:	dc02      	bgt.n	80028ea <ts_formatstring+0x48>
 80028e4:	2b69      	cmp	r3, #105	; 0x69
 80028e6:	d00f      	beq.n	8002908 <ts_formatstring+0x66>
 80028e8:	e056      	b.n	8002998 <ts_formatstring+0xf6>
 80028ea:	2b75      	cmp	r3, #117	; 0x75
 80028ec:	d037      	beq.n	800295e <ts_formatstring+0xbc>
 80028ee:	2b78      	cmp	r3, #120	; 0x78
 80028f0:	d040      	beq.n	8002974 <ts_formatstring+0xd2>
 80028f2:	e051      	b.n	8002998 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	60fa      	str	r2, [r7, #12]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	1d11      	adds	r1, r2, #4
 80028fe:	6079      	str	r1, [r7, #4]
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]
				break;
 8002906:	e047      	b.n	8002998 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	1d1a      	adds	r2, r3, #4
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	2b00      	cmp	r3, #0
 8002916:	da07      	bge.n	8002928 <ts_formatstring+0x86>
					{
						val *= -1;
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	425b      	negs	r3, r3
 800291c:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	60fa      	str	r2, [r7, #12]
 8002924:	222d      	movs	r2, #45	; 0x2d
 8002926:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8002928:	69f9      	ldr	r1, [r7, #28]
 800292a:	f107 030c 	add.w	r3, r7, #12
 800292e:	220a      	movs	r2, #10
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff6d 	bl	8002810 <ts_itoa>
				}
				break;
 8002936:	e02f      	b.n	8002998 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	1d1a      	adds	r2, r3, #4
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8002942:	e007      	b.n	8002954 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	60fa      	str	r2, [r7, #12]
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	1c51      	adds	r1, r2, #1
 800294e:	61b9      	str	r1, [r7, #24]
 8002950:	7812      	ldrb	r2, [r2, #0]
 8002952:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1f3      	bne.n	8002944 <ts_formatstring+0xa2>
					}
				}
				break;
 800295c:	e01c      	b.n	8002998 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	1d1a      	adds	r2, r3, #4
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	6819      	ldr	r1, [r3, #0]
 8002966:	f107 030c 	add.w	r3, r7, #12
 800296a:	220a      	movs	r2, #10
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff4f 	bl	8002810 <ts_itoa>
				break;
 8002972:	e011      	b.n	8002998 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	1d1a      	adds	r2, r3, #4
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4619      	mov	r1, r3
 800297e:	f107 030c 	add.w	r3, r7, #12
 8002982:	2210      	movs	r2, #16
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff43 	bl	8002810 <ts_itoa>
				break;
 800298a:	e005      	b.n	8002998 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	60fa      	str	r2, [r7, #12]
 8002992:	2225      	movs	r2, #37	; 0x25
 8002994:	701a      	strb	r2, [r3, #0]
				  break;
 8002996:	bf00      	nop
			}
			fmt++;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	3301      	adds	r3, #1
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	e007      	b.n	80029b0 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	60fa      	str	r2, [r7, #12]
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	1c51      	adds	r1, r2, #1
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f47f af7d 	bne.w	80028b4 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	461a      	mov	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	1ad3      	subs	r3, r2, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 80029d0:	b40e      	push	{r1, r2, r3}
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b085      	sub	sp, #20
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 80029da:	f107 0320 	add.w	r3, r7, #32
 80029de:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	69f9      	ldr	r1, [r7, #28]
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ff5c 	bl	80028a2 <ts_formatstring>
 80029ea:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 80029ec:	68fb      	ldr	r3, [r7, #12]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029f8:	b003      	add	sp, #12
 80029fa:	4770      	bx	lr

080029fc <__libc_init_array>:
 80029fc:	b570      	push	{r4, r5, r6, lr}
 80029fe:	4e0d      	ldr	r6, [pc, #52]	; (8002a34 <__libc_init_array+0x38>)
 8002a00:	4c0d      	ldr	r4, [pc, #52]	; (8002a38 <__libc_init_array+0x3c>)
 8002a02:	1ba4      	subs	r4, r4, r6
 8002a04:	10a4      	asrs	r4, r4, #2
 8002a06:	2500      	movs	r5, #0
 8002a08:	42a5      	cmp	r5, r4
 8002a0a:	d109      	bne.n	8002a20 <__libc_init_array+0x24>
 8002a0c:	4e0b      	ldr	r6, [pc, #44]	; (8002a3c <__libc_init_array+0x40>)
 8002a0e:	4c0c      	ldr	r4, [pc, #48]	; (8002a40 <__libc_init_array+0x44>)
 8002a10:	f000 f818 	bl	8002a44 <_init>
 8002a14:	1ba4      	subs	r4, r4, r6
 8002a16:	10a4      	asrs	r4, r4, #2
 8002a18:	2500      	movs	r5, #0
 8002a1a:	42a5      	cmp	r5, r4
 8002a1c:	d105      	bne.n	8002a2a <__libc_init_array+0x2e>
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}
 8002a20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a24:	4798      	blx	r3
 8002a26:	3501      	adds	r5, #1
 8002a28:	e7ee      	b.n	8002a08 <__libc_init_array+0xc>
 8002a2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a2e:	4798      	blx	r3
 8002a30:	3501      	adds	r5, #1
 8002a32:	e7f2      	b.n	8002a1a <__libc_init_array+0x1e>
 8002a34:	08002ad0 	.word	0x08002ad0
 8002a38:	08002ad0 	.word	0x08002ad0
 8002a3c:	08002ad0 	.word	0x08002ad0
 8002a40:	08002ad4 	.word	0x08002ad4

08002a44 <_init>:
 8002a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a46:	bf00      	nop
 8002a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4a:	bc08      	pop	{r3}
 8002a4c:	469e      	mov	lr, r3
 8002a4e:	4770      	bx	lr

08002a50 <_fini>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	bf00      	nop
 8002a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a56:	bc08      	pop	{r3}
 8002a58:	469e      	mov	lr, r3
 8002a5a:	4770      	bx	lr
